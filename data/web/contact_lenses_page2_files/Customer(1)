/* 縮小失敗。正在傳回未縮小的內容。
(1810,68-69): run-time error JS1100: Expected ',': =
(1890,52-53): run-time error JS1100: Expected ',': =
 */
/*
畫面處理
*/
(function (factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory);
    } else if (typeof module !== "undefined" && module.exports) {
        module.exports = factory;
    } else {
        factory(jQuery, window, document, CustomerResources);
    }
})(function ($, window, document, resources) {
    customerCommon = function () {
        var _mediator = {
            receivemessage: function () { console.log('receivemessage not implement yet'); }, //processor receivemessage obj
            sendmessage: function () { console.log('sendmessage not implement yet'); }, //hub sendmessage type & message
            sendmessageobj: function () { console.log('sendmessageobj not implement yet'); }, //hub sendmessage whole obj
            reConnect: function () { console.log('reConnect not implement yet'); },
            postparent: function (type, obj) {
                if (window.parent && window !== parent) {
                    window.parent.postMessage({ type: type, obj: obj }, '*');
                }
                if (window.opener) {
                    window.opener.postMessage({ type: type, obj: obj }, '*');
                }
            }, //post to parent
            dom: new Object(),
            ajax: new Object(),
            data: new Object(),
            public: new Object(),
            chatdata: new Object()
        };

        var chatOpenTypeHandle = (function () {
            var baseHandler = new function () {
                this.initHeader = function () {
                    _mediator.dom.chatheaderfield.icondisplay(false);
                };
                this.beforeunload = function () { };
                this.windowload = function () { };
            };
            var iframeobj = new function () {
                this.initHeader = function () {
                    _mediator.dom.chatheaderfield.icondisplay(true);
                };
            };
            var openwindowobj = new function () {
                this.beforeunload = function () {
                    _mediator.postparent('closewindow');
                    _mediator.sendmessage(MessageType.CustomerWindowStatus, false);
                };
            };
            var windowobj = new function () {
                this.windowload = function () {
                    var getParams = function (str) {
                        var queryString = str || window.location.search || '';
                        var keyValPairs = [];
                        var params = {};
                        queryString = queryString.replace(/.*?\?/, "");

                        if (queryString.length) {
                            keyValPairs = queryString.split('&');
                            for (pairNum in keyValPairs) {
                                var key = keyValPairs[pairNum].split('=')[0];
                                if (!key.length) continue;
                                if (typeof params[key] === 'undefined')
                                    params[key] = [];
                                params[key] = keyValPairs[pairNum].split('=')[1];
                            }
                        }
                        return params;
                    };
                    var obj = getParams(window.location.search),
                        params = new Object();
                    Object.keys(obj).forEach(function (key) {
                        if (obj[key] != undefined && key !== 'channel') {
                            params[key] = obj[key];
                        }
                    });
                    _mediator.data.customeParameter.set(params);
                    _mediator.public.chatconnect.new();
                };
            };

            return new function () {
                this.iframe = Object.assign({}, baseHandler, iframeobj);
                this.openwindow = Object.assign({}, baseHandler, openwindowobj);
                this.window = Object.assign({}, baseHandler, windowobj);
            };

            info.prototype = Object.create(_elementmanager.prototype);
        }());

        var _init = {
            chatpage: function () {
                $('.te_ts_chat_layout.defaultloader', _mediator.data.dom_frame).remove();
                $('.te_ts_chat_layout.customerchat', _mediator.data.dom_frame).show();
                if (!_mediator.data.is_mobile) {
                    _mediator.data.dom_frame.addClass('te_ts_wrap_pc');
                } else {
                    _mediator.data.dom_frame.removeClass('te_ts_wrap_pc');
                    _mediator.data.dom_frame.css('position', 'absolute'); //avoid iphone scroll
                }

                chatOpenTypeHandle[_mediator.data.chat_open_type].initHeader();
                _mediator.dom.chatmessagearea.scrollCtrl.init();
            }
        },
            _handler = {
                windowresize: function (e) {
                    clearTimeout(window.resizedFinished);
                    window.resizedFinished = setTimeout(function () {
                        var resizeobj = is_window_resize();
                        if (resizeobj.height || (_mediator.dom.richmenu.is_open ? resizeobj.width : false)) {
                            _mediator.dom.chatmessagearea.scrollCtrl.init();
                        } //因為RichMenu會隨著寬度改變高度，所以RichMenu開著的時候也要檢查寬度是否改變
                        if (resizeobj.width) {
                            _mediator.dom.quickoption.adjustWidth();
                        }
                    }, 250); //避免頻繁執行
                },
                postmessage: function (e) {
                    //之後要放網域驗證
                    if (e.origin) {
                        if (e.data && e.data.type) {
                            switch (e.data.type) {
                                case 'opened': //接到open後設定postparent function
                                    var target = e.source;
                                    _mediator.postparent = function (type, obj) {
                                        target.postMessage({ type: type, obj: obj }, e.origin);
                                    };
                                    //外部推播語 跟 第一次內部推播語相同
                                    _mediator.dom.chatmessagearea.setpromote(e.data.obj.promoteid, e.data.obj.teprod);
                                    break;
                                case 'openchat':
                                    var isNewchat = e.data.obj.newchat;
                                    _mediator.data.customeParameter.set(e.data.obj.customeParam);
                                    _mediator.dom.chatmessagearea.scrollCtrl.init();

                                    if (!_mediator.chatdata.chatid) {
                                        if (isNewchat) {
                                            _mediator.public.chatconnect.new();
                                        } else {
                                            if (!_mediator.public.chatconnect.oldchatid) {
                                                _mediator.public.chatconnect.new();
                                            }
                                        }
                                    } else {
                                        _mediator.sendmessage(MessageType.CustomerWindowStatus, true);
                                    }
                                    setTimeout(function () {
                                        _mediator.dom.inputtoolbar.messagebox.get(0).scrollIntoView(false);
                                    }, 250);
                                    _mediator.postparent('notread', false); //清除外部未讀
                                    //IOS APP若使用UIWebView,這個屬性會有問題(造成整個頁面無法滑動),在打開對話時才加上，每次關掉對話都要拔掉
                                    //使用WKWebView，不會有這問題
                                    if (_mediator.data.is_mobile) {
                                        _mediator.data.dom_frame.css('-webkit-overflow-scrolling', 'touch'); //iphone scroll smooth
                                    }
                                    break;
                                case 'opensurvey':
                                    //開啟直連滿意度問卷
                                    _mediator.dom.surveywindow.open(_mediator.chatdata.channelid, e.data.obj, true);
                                    _mediator.postparent('openedsurvey'); //清除外部未讀
                                    break;
                                case 'framemodify':
                                    _mediator.dom.chatmessagearea.scrollCtrl.init();
                                    _mediator.dom.quickoption.adjustWidth();
                                    break;
                                case 'closeEmbed':
                                    _mediator.dom.embedview.close();
                                    break;
                                case 'adjustWindow':
                                    _mediator.dom.adjustWindow();
                                    break;
                            }
                        }
                        return true;
                    }
                    return false;
                },
                beforeunload: function (e) {
                    chatOpenTypeHandle[_mediator.data.chat_open_type].beforeunload();
                },
                windowload: function (e) {
                    //windowload
                    _mediator.postparent('windowload', _mediator.data.chat_open_type);
                    chatOpenTypeHandle[_mediator.data.chat_open_type].windowload();
                },
                bannerclick: function (e) {
                    var proid = e.currentTarget.promoteid;
                    var chatid = _mediator.chatdata.chatid;
                    if (e.currentTarget.href != '') {
                        _mediator.ajax.insertbannerlog(chatid, proid).done(function (data, status, response, header) {
                            if (!data.result) {
                                console.log('insertbannerlog Failed');
                            }
                        });
                    }
                }
            },
            _template = {
                newdiv: (function () {
                    var newdiv = function () {
                        this.frame = _mediator.data.dom_frame;
                        this.container = $('<div/>');
                        this.opened = false;
                    };
                    newdiv.prototype = {
                        getloader: function (direct) {
                            var _this = this,
                                layoutDIV = document.createElement('DIV'),
                                closeA = document.createElement('A'),
                                loaderDIV = document.createElement('DIV');
                            layoutDIV.classList.add('te_ts_chat_layout');
                            layoutDIV.classList.add('loader');
                            layoutDIV.innerHTML = '<div class="te_ts_chat_header"><div class="header_icon"></div></div>';
                            closeA.innerHTML = '<span class="te_ts_icon_close"></span>';
                            closeA.href = 'javascript:void(0)';
                            closeA.onclick = function () {
                                _this.close(direct);
                            };
                            loaderDIV.classList.add('te_ts_chat_popup_mark');
                            loaderDIV.innerHTML = '<div class="te_loader04"></div>';
                            loaderDIV.style.zIndex = 0;

                            layoutDIV.querySelector('.header_icon').appendChild(closeA);
                            layoutDIV.appendChild(loaderDIV);
                            return layoutDIV;
                        },
                        loadhtml: function (html) {
                            this.container.empty();
                            this.container.append(html);
                            return $.Deferred().resolve();
                        },
                        open: function (direct) {
                            var dfd = $.Deferred();
                            this.frame = _mediator.data.dom_frame;
                            if (!this.opened && $('.te_ts_chat_layout:not(.customerchat)', this.frame).length === 0) {
                                $('.te_ts_chat_layout.customerchat', this.frame).css('display', 'none');
                                this.container.append(this.getloader(direct));
                                this.container.css('height', '100%');
                                this.frame.append(this.container);
                                this.opened = true;
                                dfd.resolve();
                            } else {
                                dfd.reject();
                            }
                            return dfd.promise().then(function () {
                                _mediator.sendmessage(MessageType.WebPageOpen, true); //從signalR告知在對話視窗中開啟畫面
                            });
                        }, //return open success
                        close: function (closewindow, frompage, channelID, customerID) {
                            var dfd = $.Deferred(),
                                returnToChat = function () {
                                    if (frompage) {
                                        _mediator.dom.openNoServicePage.open(true, channelID, customerID);
                                    }
                                    else {
                                        $('.te_ts_chat_layout.customerchat', this.frame).css('display', '');
                                        _mediator.dom.chatmessagearea.scrollCtrl.init(true);
                                        dfd.resolve();
                                    }
                                };
                            if (this.opened) {
                                this.container.remove();
                                this.container.empty();
                                this.opened = false;
                                if (closewindow) {
                                    _mediator.dom.chatheaderfield.closepage();
                                    setTimeout(function () {
                                        returnToChat();
                                    }, 500);
                                } else {
                                    returnToChat();
                                }
                            } else {
                                dfd.reject();
                            }
                            return dfd.promise().then(function () {
                                _mediator.sendmessage(MessageType.WebPageOpen, false); //從signalR告知在對話視窗中關閉畫面
                            });
                        } //return close success
                    };
                    return newdiv;
                }()),
                popupmask: (function () {
                    var popupmask = function () {
                        this.ele = document.createElement('DIV');
                        this.ele.classList.add('te_ts_chat_popup_mark');
                    };
                    (function () {
                        this.appendChild = function (node) {
                            this.ele.appendChild(node);
                        };
                        this.show = function () {
                            $('.te_ts_chat_layout:visible').append(this.ele);
                        };
                        this.hide = function () {
                            this.ele.style.display = 'none';
                        };
                        this.remove = function () {
                            if (this.ele.parentNode) {
                                this.ele.parentNode.removeChild(this.ele);
                            }
                        };
                    }).call(popupmask.prototype);
                    return popupmask;
                }())
            },
            _tool = new function () {
                this.AAndOnclickProcess = function (content, chatid, element) {
                    var _reg = {
                        jshref: new RegExp('^javascript:(.*)', 'g'),
                        jsfn: new RegExp('^(.*?)\\((.*?)\\)', 'g')
                    },
                        _content = content,
                        _dataobj = null,
                        _if_process = true;
                    if (_reg.jshref.test(_content)) {
                        _content = _content.replace(_reg.jshref, function (match, p1) {
                            return $.trim(p1);
                        });
                    } //clear 'javascript:'

                    if (_reg.jsfn.test(_content)) {
                        var _match = _content.match(/^(.*?)\((.*?)(\)$|\);$)/),
                            _fn = _match[1],
                            _param = decodeURIComponent(_match[2]);
                        switch (_fn) {
                            case 'window.open':
                                _dataobj = {
                                    type: 'url',
                                    content: _param
                                };
                                break;
                            case 'AdapterHuman':
                                _dataobj = {
                                    type: 'agent',
                                    content: _param
                                };
                                break;
                            case 'Survey':
                                _dataobj = {
                                    type: 'survey',
                                    content: _param
                                };
                                break;
                            case 'Comment':
                                _dataobj = {
                                    type: 'comment',
                                    content: _param
                                };
                                break;
                            case 'Feedback':
                                _dataobj = {
                                    type: 'feedback',
                                    content: _param
                                };
                                break;
                            default:
                                _dataobj = {
                                    type: 'windowfn',
                                    content: { name: _fn, args: _param }
                                };
                                break;
                        }
                    } //javascript function
                    else {
                        if (_content.startsWith('mailto:')) {
                            _dataobj = {
                                type: 'mailto',
                                content: _content
                            };
                        }
                        else if (_content.startsWith('tel:')) {
                            _dataobj = {
                                type: 'tel',
                                content: _content
                            };
                        }
                        else {
                            _dataobj = {
                                type: 'url',
                                content: _content
                            };
                        }
                    } //hyperlink
                    if (_dataobj) {
                        switch (_dataobj.type) {
                            case 'url':
                                var _url = _dataobj.content.replace(/'(.*?)'(,'(.*?)')?(,'(.*?)')?/, function (match, p1) { return p1; });
                                var name = _dataobj.content.replace(/'(.*?)'(,'(.*?)')?(,'(.*?)')?/, function (match, p1, p2, p3, p4, offset, string) {
                                    if (!p3)
                                        return "_blank";
                                    else
                                        return p3.replace(/,'(.*?)'/, function (match, p1) { return p1; });
                                });
                                var params = _dataobj.content.replace(/'(.*?)'(,'(.*?)')?(,'(.*?)')?/, function (match, p1, p2, p3, p4, offset, string) {
                                    if (!p4)
                                        return "";
                                    else
                                        return p4.replace(/,'(.*?)'/, function (match, p1) { return p1; });
                                });
                                window.open(_url, name, params);
                                _mediator.ajax.urlclick(_url);
                                break;
                            case 'agent':
                                var _type = _dataobj.content.replace(/'(.*?)'/, function (match, p1) { return p1; });
                                if (_mediator.chatdata.chatid === chatid || !chatid) {
                                    //轉接客服
                                    _mediator.sendmessage(MessageType.CustomerAdapterAgent, _type);
                                } else {
                                    //過期
                                    _mediator.sendmessage(MessageType.CustomerAdapterAgent, 'expired');
                                }
                                break;
                            case 'survey':
                                var _surveyid = _dataobj.content.replace(/'(.*?)'/, function (match, p1) { return p1; });
                                _mediator.dom.surveywindow.open(viewdata.ChatObj.strChannelID, _surveyid, false);
                                break;
                            case 'comment':
                                var _data = _dataobj.content.split('|');
                                switch (resources.param.MessageSource.toLowerCase()) {
                                    case 'customize':
                                        if (resources.param.CustomizeMessage) {
                                            window.open(resources.param.CustomizeMessage);
                                        }
                                        break;
                                    case 'default':
                                        _mediator.dom.customercomment.open(false, _data[0], _data[1]);
                                        break;
                                }
                                break;
                            case 'windowfn':
                                if (window[_dataobj.content.name]) {
                                    var _paramregex = /,+(?=(?:(?:[^']*'){2})*[^']*$)/g,
                                        _argsarr = _dataobj.content.args.split(_paramregex).map(function (value) {
                                            var _value = value.trim();

                                            if (_value.match(/^'(.*?)'$/)) {
                                                return _value.replace(/^'(.*?)'$/, function (match, p1) { return p1; });
                                            } else {
                                                var num = parseFloat(_value);
                                                if (num) {
                                                    return num;
                                                } else {
                                                    var param = window[_value];
                                                    if (param) {
                                                        return param;
                                                    }
                                                }
                                            }
                                            return null;
                                        });
                                    window[_dataobj.content.name].apply(window, _argsarr);
                                } else {
                                    _if_process = false;
                                }
                                break;
                            case 'mailto':
                            case 'tel':
                                _mediator.public.ignoreOnBeforeUnload.Ignore(1000);
                                if (_mediator.data.chat_open_type !== 'iframe') {
                                    _if_process = false;
                                }
                                else {
                                    window.open(_dataobj.content, '_parent');
                                }
                                break;
                            case 'feedback':
                                if (_dataobj.content) {
                                    var _temp = _dataobj.content.split('|'),
                                        _chatdetailid = _temp[0],
                                        _feedbackcontent = _temp[1];
                                    _mediator.sendmessage(MessageType.RobotChatFeedback, { chatdetailid: _chatdetailid, content: _feedbackcontent }).done(function () {
                                        ChatTemplate.prototype.setFeedbackDone($(element), _feedbackcontent, true);
                                    });
                                    if (_feedbackcontent === 'Unhelp' && resources.param.IsPopup === true) {
                                        _mediator.dom.unhelpwindow.open(_chatdetailid, false);
                                    }
                                } else {
                                    _if_process = false;
                                }
                                break;
                            default:
                                _if_process = false;
                                break;
                        }
                        return _if_process;
                    } //final process
                };
            };
        var customerCommon = function () {
            var _this = this;
            _this.mediator = null;
        };
        customerCommon.prototype = {
            data: {
                is_mobile: (function () {
                    return navigator.userAgent.match(/Android/i) ||
                        navigator.userAgent.match(/iPad/i) ||
                        navigator.userAgent.match(/webOS/i) ||
                        navigator.userAgent.match(/iPhone/i) ||
                        navigator.userAgent.match(/BlackBerry/i) ||
                        navigator.userAgent.match(/Windows Phone/i);
                }()), //是否為手機
                device: (function () {
                    //目前裝置偵測列表
                    var devicelist = ['windows', 'windows phone', 'android', 'iphone',
                        'ipad', 'blackberry', 'linux', 'playbook', 'bb10', 'mac'];

                    //取得判定裝置後即回傳
                    for (var i = 0; i < devicelist.length; i++) {
                        if (navigator.userAgent.toLowerCase().indexOf(devicelist[i]) != -1) {
                            return devicelist[i];
                        }
                    }
                    return '';
                }()), //裝置
                chat_open_type: (function () {
                    if (window.parent && window !== parent) {
                        return 'iframe';
                    }
                    if (window.opener) {
                        return 'openwindow';
                    }
                    return 'window';
                }()), //視窗類型
                dom_frame: $('.basicframe'),
                customeParameter: new function () {
                    this.get = function () {
                        return this.data;
                    };
                    this.set = function (params) {
                        if (params) {
                            this.data = params;
                        }
                    };
                }
            }, //放常用且不更新第二次的資料
            dom: {
                inputtoolbar: (function () {
                    var inputtoolbar = function () {
                        var _this = this,
                            timelimit = parseInt(resources.param.SendMessageLimitTime),
                            _autocompletecount = 0;
                        this.container = $('.customerchat .inputtoolbar');
                        this.messagebox = $('.messagebox', this.container);
                        this.messagebox.attr('maxlength', resources.param.InputCount);
                        this.staticdata = {
                            message: '',
                            sendmessage: null,
                            timeoutfn: null,
                            timer: timelimit,
                            timelimit: timelimit
                        };

                        var _handler = {
                            sendmessageclick: function (e) {
                                return _this.sendmessage();
                            },
                            messageboxkeydown: function (e) {
                                if (e.keyCode === 13) {
                                    if (e.shiftKey) {
                                        e.stopPropagation();
                                    } else {
                                        _this.sendmessage();
                                        e.preventDefault();
                                    }
                                }
                            },
                            messageboxchange: function (e) {
                                _this.changedmessage();
                            },
                            messageboxfocus: function (e) {
                                _mediator.dom.richmenu.close();
                            },
                            messageboxblur: function (e) {
                                setTimeout(function () {
                                    _mediator.dom.autocomplete.hide();
                                }, 500); //避免其他功能位置改變按不到，加上延遲
                            },
                            emojiclick: function (e) {
                                _handler.getautocompletecount().then(function (height) {
                                    var hg = (2 * height * 14) + 17;
                                    _this.messagebox.emojiPicker({
                                        width: '',
                                        height: hg,
                                        button: false,
                                        position: 'null',
                                        container: '.chattoolbar .inputtoolbar',
                                        zindex: false,  //不設定zindex屬性，否則ios初始scroll時區塊會消失
                                        overflow: {
                                            type: _mediator.data.is_mobile ? '' : 'mCustomScrollbar', //mCustomScrollbar or empty => normal
                                            axis: 'y'
                                        },
                                        onShow: function ($picker, settings, active) {
                                            _mediator.dom.uploadbox.hide();
                                            _mediator.dom.autocomplete.hide();
                                            _mediator.dom.chatmessagearea.scrollCtrl.init();
                                        },
                                        onHide: function ($picker, settings, active) {
                                            _this.messagebox.emojiPicker('destroy');
                                            _mediator.dom.chatmessagearea.scrollCtrl.init();
                                        }
                                    });
                                    _this.messagebox.emojiPicker('toggle');
                                });

                            },
                            uploadimageclick: function (e) {
                                _mediator.dom.uploadbox.show();
                            },
                            richmenuclick: function (e) {
                                if (_mediator.dom.richmenu.is_open) {
                                    return _mediator.dom.richmenu.close();
                                } else {
                                    return _mediator.dom.richmenu.open();
                                }
                            },
                            inputtoolaclick: function (e) {
                                //擋掉所有inputtool裡a元素的預設事件
                                e.preventDefault();
                            },
                            getautocompletecount: function () {
                                if (_autocompletecount) {
                                    return new Promise(function (resolve, reject) {
                                        resolve(_autocompletecount);
                                    });
                                } else {
                                    return _mediator.ajax.getautocompletecount().then(function (data) {
                                        return _autocompletecount = parseInt(data);
                                    });
                                }
                            }
                        };

                        this.container
                            .bindevent('click', 'a', _handler.inputtoolaclick)
                            .bindevent('click', '.sendmessage', _handler.sendmessageclick)
                            .bindevent('click', '.richmenu:not(.disabled)', _handler.richmenuclick)
                            .bindevent('click', '.emoji:not(.disabled)', _handler.emojiclick)
                            .bindevent('click', '.uploadimage:not(.disabled)', _handler.uploadimageclick)
                            .bindevent('keydown', '.messagebox', _handler.messageboxkeydown)
                            .bindevent('input', '.messagebox', _handler.messageboxchange)
                            .bindevent('paste', '.messagebox', _handler.messageboxchange)
                            .bindevent('cut', '.messagebox', _handler.messageboxchange)
                            .bindevent('focus', '.messagebox', _handler.messageboxfocus)
                            .bindevent('blur', '.messagebox', _handler.messageboxblur);
                    };
                    inputtoolbar.prototype = {
                        getmessage: function () {
                            return this.messagebox.val();
                        },
                        setmessage: function (val) {
                            this.messagebox.val(val);
                            this.changedmessage();
                        },
                        sendmessage: function (message) {
                            var _this = this,
                                _msg = message;
                            if (!_msg) {
                                _msg = _this.getmessage();
                            }
                            if (_msg !== '') {

                                var reTag = _msg.match(/<[^>]+>/);
                                if (reTag && reTag.length > 0) {
                                    _msg = _msg.replaceAll('<', '＜').replaceAll('>', '＞');
                                }

                                if (_msg === _this.staticdata.sendmessage) {
                                    _this.messagebox.blur();
                                    _mediator.public.popup({
                                        button: [{
                                            text: resources.text.Sure,
                                            callback: message ? null : function () { _this.messagebox.focus(); }
                                        }]
                                    }).Text(resources.param.SendLimitTimeWording);
                                } else {
                                    clearTimeout(_this.staticdata.timer);
                                    _this.staticdata.sendmessage = _msg;
                                    _this.staticdata.timer = setTimeout(function () {
                                        _this.staticdata.sendmessage = null;
                                    }, (parseInt(resources.param.SendMessageLimitTime) || 0) * 1000); //n秒內防止重複送出相同訊息

                                    //textNode, 避免html tag
                                    var Element = document.createElement('DIV');
                                    Element.appendChild(document.createTextNode(_msg));
                                    _msg = Element.innerHTML;

                                    //機器人指令中含有大括號，故如果遇到{string}的情況需編碼再丟給機器人
                                    var re = /^\{(.*?)\}/ig;
                                    _msg = _msg.replace(re, function (match, text, func) {
                                        return encodeURIComponent('{') + text + encodeURIComponent('}');
                                    });

                                    var WEB_Message = {
                                        strMessageType: MessageType.CustomerSendMessage,
                                        Message: {
                                            strMessageType: MessageType.TextMessage,
                                            strMessage: EC_emojify_STU(_msg),
                                            strChatDetailID: NewID()
                                        }
                                    };

                                    if (!message) {
                                        _this.setmessage(); //清空對話框
                                        this.messagebox.emojiPicker('hide'); //隱藏emoji
                                    }
                                    _mediator.dom.chatmessagearea.newmessage(ToChatMsgObject(WEB_Message), true);

                                    return _mediator.public.customersendmessage(WEB_Message);
                                }
                            }
                        },
                        imageuploadenable: function (enable) {
                            var $upload = $('.uploadimage', this.container);

                            if (resources.param.AllowCustomerUploadFile) {
                                $upload.show();

                                if (resources.param.FileFormatSettings.length <= 0) {
                                    enable = false;
                                }

                                if (enable) {
                                    $upload.removeClass('disabled');
                                } else {
                                    $upload.addClass('disabled');
                                }
                            } else {
                                $upload.hide();
                            }
                        },
                        changedmessage: function () {
                            var _this = this,
                                _msg = _this.getmessage();
                            if (_msg !== _this.staticdata.message) {
                                _this.staticdata.message = _msg;
                                _this.inputsetheight();
                                var $sendbtn = $('.sendmessage', _this.container);
                                if (_msg === '') {
                                    $sendbtn.addClass('disabled');
                                } else {
                                    $sendbtn.removeClass('disabled');
                                }
                                //if (!_mediator.data.is_mobile && _mediator.chatdata.status === 'BOT') {
                                //    _mediator.dom.autocomplete.show(_msg);
                                //} //手機版不出現
                                if (_mediator.chatdata.status === 'BOT') {
                                    _mediator.dom.autocomplete.show(_msg);
                                } //手機版不出現
                                _mediator.sendmessage(MessageType.CustomerTyping, _msg); //typing
                            }
                        }, //訊息框有變動時處理
                        inputsetheight: function () {
                            var getstyle = function (el, styleprop) {
                                if (el) {
                                    if (window.getComputedStyle) {
                                        return document.defaultView.getComputedStyle(el, null).getPropertyValue(styleprop);
                                    }
                                    else if (el.currentStyle) {
                                        return el.currentStyle[styleprop.encamel()];
                                    }
                                }
                                return null;
                            };
                            var _obj = this.messagebox.get(0),
                                _origheight = _obj.style.height,
                                match = this.getmessage().match(new RegExp('\n', 'g')),
                                line = match ? match.length : 0,
                                lineheight = getstyle(_obj, 'line-height'),
                                height;
                            _obj.style.height = 'auto';
                            height = _obj.scrollHeight;
                            
                            if (lineheight) {
                                lineheight = parseInt(lineheight.replace('px', '')) * 3; //最高三行
                                height = Math.min(lineheight, height);
                            }
                            height = height + 'px';
                            _obj.style.height = height;
                            if (_origheight !== height) {
                                _mediator.dom.chatmessagearea.scrollCtrl.init();
                            }
                        }, //修改輸入框高度
                        inputsetwidth: function () {
                            var _width = Array.prototype.reduce.call(this.messagebox.siblings(':visible'), function (acc, val) {
                                return acc + $(val).outerWidth();
                            }, 0);
                            this.messagebox.get(0).style.width = 'calc(100% - ' + _width + 'px - 2px)';
                        }, //input調整寬度
                        messageboxenable: function (enable) {
                            var _messagebox = this.messagebox,
                                $emoji = $('.emoji', this.container);

                            this.messagebox.attr('disabled', !enable);
                            if (enable) {
                                $emoji.removeClass('disabled');

                                var $disabledbutton = $('.disabledbutton', this.container.parent().parent());
                                this.container.show();
                                $disabledbutton.remove();
                                this.inputsetheight(); //調整輸入框高度
                                //this.inputsetwidth(); //調整輸入框寬度
                            } else {
                                $emoji.addClass('disabled');

                                //清乾淨chattoolbar
                                _mediator.dom.autocomplete.hide(); //隱藏autocomplete
                                _mediator.dom.uploadbox.hide(); //隱藏uploadbox
                                this.messagebox.emojiPicker('hide'); //隱藏emoji
                                //_mediator.dom.quickoption.hide(); //隱藏quickoption
                                this.setmessage(); //清空輸入框

                                var $disabledbutton = $('<input class="chat_btn disabledbutton disabled" type="button" value=""/>');
                                $disabledbutton.insertBefore(this.container.parent());
                                this.container.hide();
                            }
                        },
                        inputtoolbarinit: function (is_new) {
                            var RichMenuActive = JSON.parse(resources.param.RichMenuActive.toLowerCase());
                            _mediator.dom.richmenu.initmenu(RichMenuActive);

                            if (!RichMenuActive) {
                                $('.richmenu', this.container).get(0).style.display = 'none';
                            }
                            if (is_new) {
                                var $newchatbtn = $('.newchatbutton', this.container.parent().parent());
                                this.container.show();
                                $newchatbtn.remove();
                                this.inputsetheight(); //調整輸入框高度
                                this.inputsetwidth(); //調整輸入框寬度
                            } else {
                                //清乾淨chattoolbar
                                _mediator.dom.autocomplete.hide(); //隱藏autocomplete
                                _mediator.dom.uploadbox.hide(); //隱藏uploadbox
                                _mediator.dom.richmenu.close(); //隱藏richmenu
                                this.messagebox.emojiPicker('hide'); //隱藏emoji
                                _mediator.dom.quickoption.hide(); //隱藏quickoption
                                this.setmessage(); //清空輸入框

                                var $newchatbtn = $('<input class="chat_btn newchatbutton" type="button" value="' + resources.text.StartChat + '"/>');
                                $newchatbtn.insertBefore(this.container.parent());
                                this.container.hide();

                                this.container.parent().parent()
                                    .bindevent('click', '.newchatbutton', function (e) {
                                        _mediator.public.chatconnect.new();
                                    }); //重新開啟對話
                            }
                        } //inputtoolbar初始化
                    };
                    return new inputtoolbar();
                }()),
                chatmessagearea: (function () {
                    var messagelist = new Array();
                    var chatmessagearea = function () {
                        var _this = this;
                        this.container = $('.customerchat .chatmessagearea', this.frame);
                        this.scrolldata = new Object();

                        var _handler = {
                            imgclick: function (e) {
                                if (this.src) {
                                    _processor.showImage(this.src);
                                }
                            },
                            aclick: function (e) {
                                if (_tool.AAndOnclickProcess(this.href, $(this).parents('.msgbubble').data('chatid'))) {
                                    e.preventDefault();
                                }
                                return true;
                            },
                            downloadclick: function (e) {
                                e.preventDefault();
                                window.open(this.href);
                            },
                            onclickelementclick: function (e) {
                                _tool.AAndOnclickProcess($(this).data('onclick'), $(this).parents('.msgbubble').data('chatid'));
                            },
                            loadhistoryclick: function (e) {
                                var $msgobject = $(this).parents('.msgobject');
                                $msgobject.remove();
                                _this.loadhistory.setposition(_this.scrollCtrl.data().height);
                                _this.loadhistory.load();
                            } //載入過去訊息
                            ,
                            helpfulcommentclick: function (e) {
                                _tool.AAndOnclickProcess($(this).data('onclick'), '', $(this).parents('.msgobject'));
                            }
                        },
                            _processor = {
                                showImage: function (src) {
                                    var maskobj = new _template.popupmask(),
                                        $pic = $('<div class="pic_single"/>'),
                                        $img = $('<img alt=""/>');
                                    $img.get(0).src = src;
                                    maskobj.appendChild($pic.append($img).get(0));
                                    maskobj.ele.onclick = function (e) {
                                        maskobj.remove();
                                    };
                                    maskobj.show();
                                }
                            };

                        this.container
                            .bindevent('click', '.msgbubble img', _handler.imgclick)
                            .bindevent('click', '.msgbubble a:not(.downloadUrl)', _handler.aclick)
                            .bindevent('click', '.msgbubble a.downloadUrl', _handler.downloadclick)
                            .bindevent('click', '.msgbubble .onclickelement', _handler.onclickelementclick)
                            .bindevent('click', '.msgobject .loadhistory', _handler.loadhistoryclick)
                            .bindevent('click', '.helpful.feedback .comment', _handler.helpfulcommentclick);
                    };
                    chatmessagearea.prototype = {
                        newmessage: function (msgobj, append, history) {
                            append = !(append === false);
                            var template = history ? this.historychattemplate : this.chattemplate;
                            if (msgobj && template) {
                                if (append) {
                                    template.appendTo(msgobj, template.lastgroup());
                                } else {
                                    template.prependTo(msgobj, template.firstgroup());
                                }
                                if (!history) {
                                    _mediator.dom.quickoption.stepoption(); //清除quickreply
                                    this.scrollCtrl.To();
                                } //新訊息
                                else {
                                    this.loadhistory.locate();
                                } //載入過去訊息
                                this.agenttyping.refresh();
                            }
                        },
                        systemmessage: function (message, type, append, history) {
                            append = !(append === false);
                            var template = history ? this.historychattemplate : this.chattemplate;
                            if (message) {
                                if (append) {
                                    template.appendSysTo(message, type, template.lastgroup());
                                } else {
                                    template.prependSysTo(message, type, template.firstgroup());
                                }
                                if (!history) {
                                    _mediator.dom.quickoption.stepoption();
                                    this.scrollCtrl.To();
                                } //新訊息
                                else {
                                    this.loadhistory.locate();
                                } //載入過去訊息
                                this.agenttyping.refresh();
                            }
                        },
                        agenttyping: (function () {
                            var agenttyping = function () {
                                this.display = false;

                                var $dt = $('<dt><img src="' + ChatTemplateResources.Avatar.agent + '"></dt>'),
                                    $dd = $('<dd><div class="te_ts_spinner01"><div class="rect1"></div><div class="rect2"></div><div class="rect3"></div></div></dd>'),
                                    $dl = $('<dl class="msg_wrap agent"/>');
                                $dl.append($dt).append($dd);

                                this.typingele = $dl;
                            };
                            agenttyping.prototype = {
                                start: function () {
                                    if (!this.display) {
                                        this.display = true;
                                        _mediator.dom.chatmessagearea.chattemplate.container.append(this.typingele);
                                        //_mediator.dom.chatmessagearea.scrollCtrl.To();
                                    }
                                },
                                end: function () {
                                    if (this.display) {
                                        this.typingele.remove();
                                        this.display = false;
                                    }
                                },
                                refresh: function () {
                                    var _display = this.display;
                                    this.end();
                                    if (_display) {
                                        this.start();
                                    }
                                }
                            };
                            return new agenttyping();
                        }()), //處理專員輸入中
                        scrollCtrl: (function () {
                            var scrollCtrl = function () {
                                this.scrolldata = new Object();
                                this.mcsInitialized = false;
                            };
                            scrollCtrl.prototype = {
                                data: function () {
                                    var retobj = {
                                        height: 0, //scrollHeight
                                        top: 0    //scrollTop
                                    };
                                    if (this.$scroll) {
                                        if (this.is_mcs) {
                                            retobj.height = $('.mCSB_container', this.$scroll).height();
                                            //top還不確定怎麼抓
                                        } else {
                                            retobj.height = this.$scroll.get(0).scrollHeight;
                                            retobj.top = this.$scroll.get(0).scrollTop;
                                        }
                                    }
                                    return retobj;
                                },
                                init: function (forceupdate) {
                                    var _this = _mediator.dom.chatmessagearea,
                                        __this = this,
                                        $scroll = _this.container.parents('#JSscroll'),
                                        setscroll = function () {
                                            var _origheight = $scroll.height(),
                                                _height = function () {
                                                    var customerchatElem = document.querySelector('.customerchat');
                                                    var contentElem = customerchatElem.querySelector('.te_ts_content');
                                                    var footerElem = customerchatElem.querySelector('.te_ts_chat_footer');

                                                    var height = footerElem.offsetTop - contentElem.offsetTop - customerchatElem.offsetTop;

                                                    var toolbarElem = customerchatElem.querySelector('.chattoolbar');
                                                    var richmenuElem = customerchatElem.querySelector('.richmenufield');
                                                    if ((richmenuElem || null) !== null && richmenuElem.style.display !== 'none') {
                                                        if (toolbarElem.offsetWidth === richmenuElem.offsetWidth) {
                                                            var boundingClientRect = richmenuElem.getBoundingClientRect();
                                                            if (((boundingClientRect || {}).height || 0) > 0) {
                                                                height -= boundingClientRect.height;
                                                            } else {
                                                                height -= richmenuElem.offsetHeight;
                                                            }
                                                        }
                                                    }

                                                    return height;
                                                }.bind(_this)();
                                            if (_origheight !== _height || forceupdate) {
                                                $scroll.height(_height);
                                                if (__this.is_mcs) {
                                                    if (!$scroll.data('mCS')) {
                                                        $scroll.mCustomScrollbar({
                                                            theme: "dark-4",
                                                            alwaysShowScrollbar: 1,
                                                            callbacks: {
                                                                onCreate: function () {
                                                                    $scroll.css('visibility', 'hidden');
                                                                },
                                                                onInit: function () {
                                                                    //延遲執行，確保Initialized
                                                                    setTimeout(function () {
                                                                        __this.mcsInitialized = true;
                                                                        if ((__this.scrollCallback || null) !== null) {
                                                                            __this.scrollCallback();
                                                                            __this.scrollCallback = undefined;
                                                                        }
                                                                        $scroll.css('visibility', '');
                                                                    }, 100);
                                                                },
                                                                whileScrolling: function () {
                                                                    if (this.mcs.topPct != -0) {
                                                                        __this.scrolldata.topPct = this.mcs.topPct;
                                                                    }
                                                                }
                                                            }
                                                        });
                                                    } else {
                                                        if ((__this.scrolldata.topPct || null) !== null) {
                                                            $scroll.mCustomScrollbar("scrollTo", __this.scrolldata.topPct + '%', {
                                                                scrollInertia: 0
                                                            });
                                                        }
                                                    }
                                                } else {
                                                    var _scroll = $scroll.get(0);
                                                    if (_scroll.style.overflowY !== 'auto') {
                                                        _scroll.style.overflowY = 'auto';
                                                        $scroll.off('scroll').on('scroll', function (e) {
                                                            __this.scrolldata.bottom = _scroll.scrollHeight - (_scroll.scrollTop + _scroll.clientHeight);
                                                        });
                                                    } else {
                                                        if (__this.scrolldata.bottom === 0) {
                                                            //若滑到最底scroll基準點為bottom
                                                            //_scroll.scrollTop = _scroll.scrollHeight;
                                                            $(_scroll).animate({ scrollTop: _scroll.scrollHeight }, 0.1);
                                                        }
                                                    }
                                                }
                                            }
                                        };
                                    _mediator.dom.richmenu.setposition();
                                    __this.$scroll = null;
                                    __this.is_mcs = !_mediator.data.is_mobile && $.fn.mCustomScrollbar; //非手機且有mCustomScrollbar則使用mCustomScrollbar

                                    $scroll.css('visibility', 'hidden');
                                    setscroll();
                                    $scroll.css('visibility', '');

                                    __this.$scroll = $scroll;
                                },
                                To: function (_target, scrollInertia) {
                                    var _this = _mediator.dom.chatmessagearea;
                                    if (this.$scroll) {
                                        scrollInertia = scrollInertia === 0 ? 0 : (scrollInertia || null) === null ? 1000 : scrollInertia; //滑動速度(預設1000)
                                        var _targetheight = NaN,
                                            $targetobj;
                                        if (typeof _target === 'number') {
                                            _targetheight = _target;
                                        } //目標為數字
                                        else {
                                            if (_target && _target.length) {
                                                $targetobj = _target;
                                            } else {
                                                //邏輯：滑到最後一句客戶對話(不往上滑), 或專員第一句(找不到客戶對話時)
                                                var $msgbubble = $('.msgbubble', $('.msgobject.client', _this.$messagefield).last()).last(); //最後一組客戶對話的最後一句

                                                if (!($msgbubble && $msgbubble.length)) {
                                                    $msgbubble = $('.msgbubble', $('.msgobject.agent', _this.$messagefield).last()).first(); //最後一組專員對話的第一句
                                                } //找不到客戶對話

                                                if ($msgbubble && $msgbubble.length) {
                                                    if ($msgbubble.get(0).getBoundingClientRect().top > 0) {
                                                        $targetobj = $msgbubble;
                                                    }
                                                } //物件存在且不在視窗上方
                                            }
                                        } //目標不為數字

                                        var $scroll = this.$scroll;
                                        if (_targetheight || $targetobj) {
                                            if (this.is_mcs) {
                                                var mCSscroll = function () {
                                                    var scrollCallback = function (scrollInertia) {
                                                        $scroll.mCustomScrollbar("scrollTo", _targetheight || $targetobj, {
                                                            scrollInertia: scrollInertia
                                                        });
                                                    };

                                                    if (this.mcsInitialized) {
                                                        scrollCallback(scrollInertia);
                                                    } else {
                                                        this.scrollCallback = function () { scrollCallback(0); };
                                                    }
                                                }.bind(this);

                                                mCSscroll();
                                                if (!_targetheight) {
                                                    $('.msgbubble img, .msgbubble canvas', $scroll).off('load').off('error')
                                                        .on('load', function () {
                                                            //圖片載入完成後再次進行scroll
                                                            mCSscroll();
                                                        }).on('error', function (err) {
                                                        });
                                                } //不是指定高度
                                            } else {
                                                $scroll.scrollTopTo(_targetheight || $targetobj, scrollInertia);
                                            }
                                        }
                                    }
                                }
                            };

                            return new scrollCtrl();
                        }()),
                        loadhistory: (function () {
                            var loadhistory = function () {
                                this.list = new Array();
                                this.loadcount = 0;
                                this.position = 0;
                                this.ready = false;
                            };
                            loadhistory.prototype = {
                                init: function () {
                                    this.list = new Array();
                                    this.loadcount = 0;
                                    this.position = 0;
                                    this.ready = false;
                                },
                                setdata: function (obj) {
                                    if (!this.ready) {
                                        obj.list.reverse(); //倒轉，由後往前載入
                                        this.list = obj.list;
                                        this.loadcount = obj.loadcount;
                                        this.ready = true;
                                        return true;
                                    }
                                    return false;
                                },
                                setposition: function (position) {
                                    this.position = position;
                                }, //設定載入過去訊息定位
                                load: function () {
                                    if (this.list.length) {
                                        var _loadlist = this.list.splice(0, this.loadcount - 1);
                                        _loadlist.forEach(function (value) {
                                            value.Message.History = true;
                                            _mediator.receivemessage(value);
                                        }); //載入訊息
                                        if (this.list.length) {
                                            _mediator.dom.chatmessagearea.systemmessage(CustomerResources.text.LoadMoreChat, 'button', false, true);
                                        } //還有訊息
                                    }
                                }, //載入過去訊息
                                locate: function () {
                                    _mediator.dom.chatmessagearea.scrollCtrl.To(_mediator.dom.chatmessagearea.scrollCtrl.data().height - this.position, 0);
                                } //載入過去訊息定位
                            };
                            return new loadhistory();
                        }()), //載入過去訊息
                        init: function () {
                            var $promotefield = $('<div/>'),
                                $historyfield = $('<div/>'),
                                $messagefield = $('<div/>'),
                                $space = $('dl.space', this.container);
                            $(':not(dl.space)', this.container).remove();
                            $historyfield.insertAfter($space);
                            $promotefield.insertAfter($historyfield);
                            $messagefield.insertAfter($promotefield);

                            this.$historyfield = $historyfield;
                            this.historychattemplate = new ChatTemplate(this.$historyfield);
                            this.$promotefield = $promotefield;
                            this.$messagefield = $messagefield;
                            this.chattemplate = new ChatTemplate(this.$messagefield);
                            _mediator.dom.chatmessagearea.scrollCtrl.init();
                        },
                        setpromote: function (promoteid, teprod) {
                            this.promoteid = promoteid;
                            this.teprod = teprod;
                        },
                        newpromote: function () {
                            if (resources.param.PromoteActive.toLocaleLowerCase() === 'true') {
                                var dfd = $.Deferred();

                                _mediator.ajax.getpromote(_mediator.chatdata.chatid, this.promoteid, this.teprod).done(function (data, status, response, header) {
                                    var prom = JSON.parse(data);
                                    if (prom.strPromoteLDesc) {
                                        return _mediator.ajax.getrichcontentgroup(prom.strPromoteLDesc, _mediator.chatdata.chatid).done(function (data) {
                                            prom.strPromoteLDesc = data;
                                            dfd.resolve(prom);
                                        });
                                    } else {
                                        dfd.resolve(prom);
                                    }
                                });
                                dfd.promise()
                                    .then(function (prom) {
                                        _mediator.dom.chatmessagearea.showpromote(prom);
                                    })
                                    .then(function () {
                                        var _banner = document.querySelector('.temcs_banner a');
                                        if (_banner != null) {
                                            _banner.addEventListener('click', _handler.bannerclick);
                                        }
                                    });
                            }
                            //重置內部推播語
                            this.promoteid = '';
                        },
                        showpromote: function (promobj) {
                            var is_mcs = !_mediator.data.is_mobile && $.fn.mCustomScrollbar;
                            this.$promotefield.empty();
                            if (promobj) {
                                //推播文字
                                var _lastpro = document.querySelectorAll('.promote');
                                if (_lastpro.length)
                                    _lastpro.forEach(function (e) { e.remove(); });
                                //推播banner
                                if (promobj.strPromoteImage) {
                                    var _img = document.createElement('img');
                                    _img.src = promobj.strPromoteImage;
                                    var _a = document.createElement('a');
                                    if (promobj.strPromoteUrl)
                                        _a.href = promobj.strPromoteUrl;
                                    _a.target = "_blank";
                                    _a.promoteid = promobj.strPromoteID;
                                    $(_a).append(_img);
                                    var _div = document.createElement('div');
                                    _div.className = _div.className + ' temcs_banner promote';
                                    $(_div).append(_a);
                                    this.$promotefield.append(_div);
                                    //this.container.children('.space').after($div);
                                }
                                if (promobj.strPromoteLDesc) {
                                    var _div = document.createElement('div');
                                    _div.classList.add('promote');
                                    if (Array.isArray(promobj.strPromoteLDesc)) {
                                        promobj.strPromoteLDesc.forEach(function (value) {
                                            var valuediv = document.createElement('DIV');
                                            valuediv.classList.add(value.is_bubble ? 'te_ts_eve_msg' : 'msg_wrap_less');
                                            valuediv.innerHTML = value.HeadHtml + value.ListHtml + value.FooterHtml;

                                            var EmojichildNodesProcess = function (_ele) {
                                                if (_ele.childNodes.length) {
                                                    var removeArr = new Array();
                                                    Array.prototype.forEach.call(_ele.childNodes, function (value) {
                                                        var remove = false;
                                                        if (value.nodeType === Node.TEXT_NODE && $.trim(value.nodeValue)) {
                                                            var _newval = ProcessEmoji(value.nodeValue);
                                                            if (_newval !== value.nodeValue) {
                                                                var _span = document.createElement('SPAN');
                                                                _span.innerHTML = _newval;
                                                                removeArr.push({ orrgin: value, new: _span });
                                                                remove = true;
                                                            }
                                                        }
                                                        if (!remove) {
                                                            EmojichildNodesProcess(value);
                                                        }
                                                    });
                                                    if (removeArr.length) {
                                                        removeArr.forEach(function (object) {
                                                            var value = object.orrgin;
                                                            var span = object.new;
                                                            if (value.parentNode) {
                                                                value.parentNode.insertBefore(span, value);
                                                                value.parentNode.removeChild(value);
                                                            }
                                                        });
                                                    }
                                                }
                                            };
                                            EmojichildNodesProcess(valuediv);

                                            var onclickgroup = valuediv.querySelectorAll('[onclick]');
                                            if (onclickgroup && onclickgroup.length) {
                                                Array.prototype.forEach.call(onclickgroup, function (ele) {
                                                    var _onclick = ele.getAttribute('onclick');
                                                    ele.removeAttribute('onclick');
                                                    ele.setAttribute('data-onclick', _onclick);
                                                    ele.classList.add("onclickelement");
                                                    if (ele.tagName === 'A') {
                                                        ele.href = 'javascript:void(0);';
                                                    }
                                                });
                                            }
                                            _div.appendChild(valuediv);
                                        });
                                    }
                                    this.$promotefield.append(_div);
                                    //slider處理
                                    $('.slider_wrap', this.$promotefield).sliderWrapProcess();
                                    //this.container.children('.space').after(_div);
                                    $(_div).bindevent('click', 'a', function (e) {
                                        if (_tool.AAndOnclickProcess(this.href)) {
                                            e.preventDefault();
                                        }
                                    });
                                    $(_div).bindevent('click', '.onclickelement', function (e) {
                                        _tool.AAndOnclickProcess($(this).data('onclick'));
                                    });
                                }

                                //手機要滑到最下面
                                if (!is_mcs)
                                {
                                    this.scrollCtrl.To();
                                }
                            }
                        }
                    };
                    return new chatmessagearea();
                }()),
                chatheaderfield: (function () {
                    var chatheaderfield = function () {
                        var _this = this;
                        this.container = $('.customerchat .headerfield');

                        this.container
                            .bindevent('click', '.minify', function (e) {
                                _this.minifypage();
                                e.preventDefault();
                            })
                            .bindevent('click', '.close', function (e) {
                                _this.closepage(true);
                                e.preventDefault();
                            });
                    };
                    chatheaderfield.prototype = {
                        icondisplay: function (display) {
                            var $headericonfield = $('.headericonfield', this.container);
                            if (display) {
                                $headericonfield.show();
                            } else {
                                $headericonfield.hide();
                            }
                        },
                        closepage: function (is_chat) {
                            var funcclose = function () {
                                _mediator.postparent('closeframe');
                                _mediator.sendmessage(MessageType.CustomerWindowStatus, false);
                                _mediator.public.chatconnect.end();
                                //IOS APP若使用UIWebView,這個屬性會有問題(造成整個頁面無法滑動),在打開對話時才加上，每次關掉對話都要拔掉
                                //使用WKWebView，不會有這問題
                                if (_mediator.data.is_mobile) {
                                    _mediator.data.dom_frame.css('-webkit-overflow-scrolling', ''); //iphone scroll smooth
                                }
                                //表情符號隱藏
                                $('.emojiPopup').hide();
                                return;
                            },
                                popoptions = {
                                    button: [
                                        { text: CustomerResources.text.Cancel, callback: null },
                                        { text: CustomerResources.text.Sure, callback: funcclose }
                                    ]
                                };
                            if (_mediator.chatdata.chatid && is_chat) {
                                _mediator.public.popup(popoptions).Text(CustomerResources.text.VerifyChatEnd);
                            } else {
                                funcclose();
                            }
                        },
                        minifypage: function () {
                            _mediator.postparent('minifyframe');
                            _mediator.sendmessage(MessageType.CustomerWindowStatus, false);
                            //IOS APP若使用UIWebView,這個屬性會有問題(造成整個頁面無法滑動),在打開對話時才加上，每次關掉對話都要拔掉
                            //使用WKWebView，不會有這問題
                            if (_mediator.data.is_mobile) {
                                _mediator.data.dom_frame.css('-webkit-overflow-scrolling', ''); //iphone scroll smooth
                            }
                            //表情符號隱藏
                            $('.emojiPopup').hide();
                        }
                    };
                    return new chatheaderfield();
                }()), //chat area header
                autocomplete: (function () {
                    var autocomplete = function () {
                        var _this = this;
                        this.container = $('.customerchat .chattoolbar');
                        this.$inputtoolbar = $('.inputtoolbar', this.container);
                        this.template = $('<div class="autocomplete show"><ul class="list autocompletelist"></ul></div>');
                        this.askcount = 0;
                    };
                    autocomplete.prototype = {
                        show: function (keyword) {
                            var _this = this,
                                _count = ++_this.askcount,
                                dfd = $.Deferred();
                            keywordarr = keyword ? keyword.toArray() : null;
                            if (keywordarr && keywordarr.length >= 2) {
                                _mediator.ajax.getautocomplete(keywordarr)
                                    .done(function (data) {
                                        if (_this.askcount === _count) {
                                            var $ul = $('.autocompletelist', _this.template),
                                                _fragment = document.createDocumentFragment(),
                                                symbolregex = new RegExp('(\\?|\\/|\\\\)', 'g'),
                                                keywords = keywordarr.join('|').replace(symbolregex, function (match, p1) {
                                                    return '\\' + match;
                                                }),
                                                regex = new RegExp(keywords, 'g');

                                            _this.hide();

                                            if (data && data.length) {
                                                _mediator.dom.inputtoolbar.messagebox.emojiPicker('hide'); //隱藏emoji

                                                data.forEach(function (value, index, array) {
                                                    var $li = $('<li class="autocompleteitem" data-acid="' + value.Value + '" data-actext="' + value.Text + '"/>'),
                                                        newDesc = value.Text.replace(regex, function (match, p1, p2, p3, offset, string) {
                                                            return '<span>' + match + '</span>';
                                                        });
                                                    $li.html(newDesc);
                                                    _fragment.appendChild($li.get(0));
                                                });
                                                $ul.append(_fragment);
                                                _this.template.insertBefore(_this.$inputtoolbar);
                                                if (_mediator.data.is_mobile) {
                                                    _this.template.get(0).style.overflowY = 'auto';
                                                } else {
                                                    _this.template.mCustomScrollbar({
                                                        theme: "dark-4"
                                                    });
                                                }

                                                _this.template.bindevent('mousedown', '.autocompleteitem', function (e) {
                                                    e.preventDefault();
                                                }).bindevent('click', '.autocompleteitem', function (e) {
                                                    var $li = $(this),
                                                        _text = $li.data('actext'),
                                                        _id = $li.data('acid');
                                                    _mediator.dom.inputtoolbar.setmessage(_text);
                                                    _mediator.dom.inputtoolbar.sendmessage();
                                                    _mediator.ajax.autocompleteclick(_id, _text);
                                                }); //選取autocomplete
                                                _mediator.dom.chatmessagearea.scrollCtrl.init();
                                            }
                                        }
                                        dfd.resolve();
                                    })
                                    .fail(function (err) {
                                        dfd.reject();
                                    });
                            } else {
                                _this.hide();
                                dfd.reject();
                            }
                            return dfd.promise();
                        },
                        hide: function () {
                            if (this.template.parent().length) {
                                if (_mediator.data.is_mobile) {
                                    this.template.get(0).style.overflowY = '';
                                } else {
                                    this.template.mCustomScrollbar('destroy');
                                }
                                this.template.remove();
                                $('.autocompletelist', this.template).empty();
                                _mediator.dom.chatmessagearea.scrollCtrl.init();
                            }
                        }
                    };
                    return new autocomplete();
                }()), //AutoComplete
                uploadbox: (function () {
                    var uploadbox = function () {
                        this._element = null;
                        this.InvincibleStar = false;
                        this.containerElement = document.querySelector('.customerchat .chattoolbar');
                        this.inputtoolbarElement = this.containerElement.querySelector('.inputtoolbar');
                    };

                    var createContainer = function (elements) {
                        var autocompleteElement = document.createElement('div');
                        autocompleteElement.classList.add('autocomplete');
                        autocompleteElement.classList.add('show');
                        var morebtnElement = document.createElement('div');
                        morebtnElement.classList.add('morebtn');

                        elements.forEach(function (element) {
                            morebtnElement.appendChild(element);
                        });
                        autocompleteElement.appendChild(morebtnElement);

                        return autocompleteElement;
                    };

                    var fileOnChangeEvent = function (e) {
                        var dfd = $.Deferred(),
                            _file = this.files[0];

                        if (_file) {
                            let validate = UploadFileValidate(_file, resources.param.FileFormatSettings);
                            if (validate.valid) {
                                //驗證成功
                                let fileMessage = {
                                    strMessageType: MessageType.CustomerSendMessage,
                                    Message: {
                                        strChatDetailID: NewID(),
                                        ContentType: _file.type,
                                        FileName: _file.name
                                    }
                                };

                                switch (validate.fileType) {
                                    case 'Image':
                                        fileMessage.Message['strMessageType'] = MessageType.ImageMessage;
                                        break;
                                    case 'Video':
                                        fileMessage.Message['strMessageType'] = MessageType.VideoMessage;
                                        break;
                                    case 'Audio':
                                        fileMessage.Message['strMessageType'] = MessageType.AudioMessage;
                                        break;
                                    case 'Document':
                                        fileMessage.Message['strMessageType'] = MessageType.DocumentMessage;
                                        break;
                                }

                                //檔案載入中...
                                _mediator.dom.chatmessagearea.newmessage(ToChatMsgObject(fileMessage), true);

                                switch (validate.fileType) {
                                    case 'Image':
                                        Base64ImageProcessor(_file, function (Image) {
                                            fileMessage.Message['strMessage'] = Image.getBase64();
                                            _mediator.dom.chatmessagearea.newmessage(ToChatMsgObject(fileMessage), true);

                                            return _mediator.public.customersendmessage(fileMessage).done(function () {
                                                dfd.resolve();
                                            });
                                        });
                                        break;
                                    case 'Audio':
                                    case 'Video':
                                    case 'Document':
                                        LoadFile(_file).then(function (fileDataURL) {
                                            fileMessage.Message['strMessage'] = fileDataURL;

                                            return _mediator.public.customersendmessage(fileMessage).done(function () {
                                                dfd.resolve();
                                            });
                                        });
                                        break;
                                }
                            } else {
                                //驗證失敗
                                let message = UploadErrorMessage(validate, resources);
                                if ((message || '') !== '') {
                                    _mediator.public.popup().Text(message);
                                }
                                dfd.reject();
                            }
                        } else {
                            dfd.reject();
                        }
                        this.value = '';

                        return dfd.promise();
                    };

                    var createVideoElement = function () {
                        var a = document.createElement('a');
                        a.href = 'javascript:void(0)';
                        var icon = document.createElement('i');
                        icon.classList.add('material-icons-outlined');
                        icon.textContent = 'slideshow';
                        var p = document.createElement('p');
                        p.textContent = resources.text.FileType_Video;
                        a.appendChild(icon);
                        a.appendChild(p);

                        var file = document.createElement('input');
                        file.type = 'file';
                        file.accept = 'video/*';
                        file.setAttribute('capture', 'camera');
                        file.onchange = fileOnChangeEvent;

                        a.onclick = function () {
                            file.click();
                        };

                        return a;
                    };

                    var createImageElement = function () {
                        var a = document.createElement('a');
                        a.href = 'javascript:void(0)';
                        var icon = document.createElement('i');
                        icon.classList.add('material-icons-outlined');
                        icon.textContent = 'photo_size_select_actual';
                        var p = document.createElement('p');
                        p.textContent = resources.text.FileType_Image;
                        a.appendChild(icon);
                        a.appendChild(p);

                        var file = document.createElement('input');
                        file.type = 'file';
                        file.accept = 'image/*';
                        file.setAttribute('capture', 'camera');
                        file.onchange = fileOnChangeEvent;

                        a.onclick = function () {
                            file.click();
                        };

                        return a;
                    };

                    var createFileElement = function () {
                        var a = document.createElement('a');
                        a.href = 'javascript:void(0)';
                        var icon = document.createElement('i');
                        icon.classList.add('material-icons-outlined');
                        icon.textContent = 'insert_drive_file';
                        var p = document.createElement('p');
                        p.textContent = resources.text.FileType_Document;
                        a.appendChild(icon);
                        a.appendChild(p);

                        var file = document.createElement('input');
                        file.type = 'file';
                        file.accept = '*';
                        file.onchange = fileOnChangeEvent;

                        a.onclick = function () {
                            file.click();
                        };

                        return a;
                    };

                    uploadbox.prototype.show = function () {
                        if (resources.param.AllowCustomerUploadFile && resources.param.FileFormatSettings.length > 0 && this._element === null) {
                            var elements = new Array();

                            //可上傳圖片
                            if (resources.param.FileFormatSettings.some(function (value) { return value.FileType === 'Image'; })) {
                                elements.push(createImageElement());
                            }

                            //可上傳影片
                            if (resources.param.FileFormatSettings.some(function (value) { return value.FileType === 'Video'; })) {
                                elements.push(createVideoElement());
                            }

                            //有任何可上傳的類型
                            if (resources.param.FileFormatSettings.length > 0) {
                                elements.push(createFileElement());
                            }

                            if (elements.length > 0) {
                                this._element = createContainer(elements);

                                _mediator.dom.autocomplete.hide();
                                _mediator.dom.richmenu.close();

                                if (this._element !== null) {
                                    this.containerElement.insertBefore(this._element, this.inputtoolbarElement);
                                    _mediator.dom.chatmessagearea.scrollCtrl.init();

                                    this.InvincibleStar = true;
                                    setTimeout(function () { this.InvincibleStar = false; }.bind(this));
                                }
                            }
                        }
                    };

                    uploadbox.prototype.hide = function () {
                        if (this._element !== null) {
                            var _parentElement = this._element.parentNode;
                            if (_parentElement) {
                                _parentElement.removeChild(this._element);
                            }
                            this._element = null;
                            _mediator.dom.chatmessagearea.scrollCtrl.init();
                        }
                    };

                    uploadbox.prototype.tryclose = function (e) {
                        if (this._element !== null) {
                            var isThis = false;
                            var parent = e.target;
                            while (!isThis && (parent || '') !== '' && parent !== document) {
                                if (parent === this._element) {
                                    isThis = true;
                                }
                                parent = parent.parentNode;
                            }

                            if (!isThis && !this.InvincibleStar) {
                                this.hide();
                            }
                        }
                    };

                    return new uploadbox();
                }()),
                quickoption: (function () {
                    var quickoption = function () {
                        var _this = this;
                        this.container = $('.customerchat .chattoolbar');
                        this.template = $('<div class="quick_option"><ul class="quickoptionlist"></ul></div>');
                        this.type = null;
                        this.customedtype = {
                            getqueuestatus: 1, opencomments: 2, chatend: 3, adapteragent: 4, getivrlist: 5
                        };
                        this.queuetimer = null;
                    };
                    quickoption.prototype = {
                        agentonlywelcome: function () {
                            var _this = this,
                                list = [
                                    { caption: resources.param.AgentButtonDesc, postback: this.customedtype.adapteragent }
                                ];
                            _this.showlist(list, 'agentonlywelcome');
                        },
                        ivroption: function (chattype, cnt) {
                            var _this = this,
                                list = [
                                    { caption: resources.text.Leave, postback: _this.customedtype.chatend }
                                ];
                            if (chattype !== 'other' && cnt !== null && cnt > 1) {
                                list.push({ caption: resources.text.ReElectIVR, postback: _this.customedtype.getivrlist });
                            }
                            if (resources.param.NoAgentComment)
                                list.push({ caption: resources.text.Comments, postback: _this.customedtype.opencomments });
                            _this.showlist(list, 'ivroption');
                        },
                        queue: function () {
                            var _this = this,
                                list = new Array();
                            list.push({ caption: resources.text.Inquire, postback: this.customedtype.getqueuestatus });
                            list.push({ caption: resources.text.Leave, postback: this.customedtype.chatend });
                            if (resources.param.BusySendMessage) {
                                list.push({ caption: resources.text.Comments, postback: this.customedtype.opencomments });
                            }

                            // 延遲一秒原因: 在點選轉接人工客服尚未回時會先顯示 故延遲一秒等回覆
                            // 延遲一秒問題: timer在hide()會被清空，會在timeout被執行前先被清掉 會在排隊流程中重整會發生
                            // 處理方式: 把排隊流程跑過的function加參數控制是否要清timeout
                            _this.queuetimer = setTimeout(function () {
                                _this.showlist(list, 'queue');
                            }, 1000); //延遲1秒執行
                        },
                        stepoption: function (list) {
                            var type = 'step';
                            if (list && list.length) {
                                this.showlist(list, type, false);
                            } else {
                                if (this.type === type) {
                                    this.hide(false);
                                }
                            }
                        },
                        showlist: function (list, type, closeTimer = true) {
                            var _this = this,
                                $ul = $('.quickoptionlist', _this.template),
                                _fragment = document.createDocumentFragment();

                            _this.hide(closeTimer);
                            _this.type = type;
                            if (list && list.length) {
                                list.forEach(function (value, index, array) {
                                    var _text = value.caption,
                                        _value = value.postback,
                                        $li = $('<li/>').text(_text);
                                    $li.data('value', _value);
                                    _fragment.appendChild($li.get(0));
                                });
                                $ul.append(_fragment);
                                _this.container.prepend(_this.template);

                                _this.adjustWidth();

                                if (_mediator.data.is_mobile) {
                                    _this.template.get(0).style.overflowX = 'auto';
                                } else {
                                    _this.template.mCustomScrollbar({
                                        theme: 'minimal-dark',
                                        axis: 'x'
                                    });
                                }

                                _this.template.bindevent('click', 'ul.quickoptionlist li', function (e) {
                                    var $this = $(this),
                                        _caption = $this.text(),
                                        _postback = $this.data('value'),
                                        _hide = true;
                                    if (_this.type === 'step') {
                                        _mediator.public.passoption(_caption, _postback);
                                    } else {
                                        switch (_postback) {
                                            case _this.customedtype.getqueuestatus: //查詢
                                                var WEB_Message = {
                                                    strMessageType: MessageType.CustomerSendMessage,
                                                    Message: {
                                                        strMessageType: MessageType.TextMessage,
                                                        strMessage: resources.text.Inquire,
                                                        strChatDetailID: NewID()
                                                    }
                                                };
                                                _mediator.public.customersendmessage(WEB_Message);
                                                _hide = false;
                                                break;
                                            case _this.customedtype.opencomments: //留言
                                                switch (resources.param.MessageSource.toLowerCase()) {
                                                    case 'customize':
                                                        if (resources.param.CustomizeMessage) {
                                                            window.open(resources.param.CustomizeMessage);
                                                        }
                                                        break;
                                                    case 'default':
                                                        _mediator.dom.customercomment.open();
                                                        break;
                                                }
                                                _mediator.public.chatconnect.end('CommentEndCall');
                                                break;
                                            case _this.customedtype.chatend: //離開
                                                _mediator.public.chatconnect.end();
                                                break;
                                            case _this.customedtype.adapteragent: //轉接人工
                                                _mediator.sendmessage(MessageType.CustomerAdapterAgent, 'normal');
                                                break;
                                            case _this.customedtype.getivrlist: //重選IVR
                                                _mediator.sendmessage(MessageType.CustomerAdapterAgent);
                                                break;
                                        }
                                    }
                                    if (_hide) {
                                        _this.hide(closeTimer);
                                    }
                                });
                            }
                        },
                        hide: function (closeTimer = true) {
                            var _this = this,
                                $ul = $('.quickoptionlist', _this.template);
                            if (_this.queuetimer && closeTimer) {
                                clearTimeout(_this.queuetimer);
                            }

                            $ul.empty();
                            $ul.get(0).style.width = '';

                            if (_mediator.data.is_mobile) {
                                _this.template.get(0).style.overflowX = '';
                            } else {
                                _this.template.mCustomScrollbar('destroy');
                            }
                            _this.template.remove();
                            _this.type = null;
                        },
                        adjustWidth: function () {
                            var _ul = this.template.get(0).querySelector('ul');
                            if (_ul && _ul.clientWidth > 0) {
                                var _width = Array.prototype.reduce.call(_ul.querySelectorAll('li'), function (acc, val) {
                                    return acc + $(val).outerWidth(true);
                                }, 2);
                                if (_width > this.template.width()) {
                                    _ul.style.width = _width + 'px';
                                } else {
                                    _ul.style.width = '';
                                }
                            }
                        } //調整選項寬度
                    };
                    return new quickoption();
                }()), //快速回覆選項
                popwindow: (function () {
                    var popwindow = function () {

                    };

                    popwindow.prototype.pop = function (data) {
                        switch (data.window) {
                            case 'survey':
                                _mediator.dom.surveywindow.open(viewdata.ChatObj.strChannelID, data.id, false);
                                break;
                            case 'embed':
                                _mediator.dom.embedview.open(data.url, data.withHeader);
                                break;
                            default:
                                break;
                        }
                    };

                    return new popwindow;
                }()), //開啟視窗
                IVR: (function () {
                    var IVR = function () {
                        var popupwrapobj = new _template.popupmask(),
                            $title = $('<h3/>').text(resources.text.PleaseSelectIVR),
                            $list = $('<ul class="ivrlist"/>'),
                            $frame = $('<div class="choose_list"/>').append($title).append($list);
                        this.frame = $frame;
                        popupwrapobj.appendChild($frame.get(0));
                        this.pop = popupwrapobj;
                    };
                    IVR.prototype = {
                        select: function (id) {
                            _mediator.sendmessage(MessageType.SelectIVR, id);
                        }, //選擇IVR
                        close: function () {
                            var listElem = this.pop.ele.querySelector('.ivrlist');
                            listElem.innerHTML = '';
                            this.pop.remove();
                        }, //移除IVR
                        open: function (ivrlist) {
                            var _this = this;
                            _this.close();

                            if (ivrlist && ivrlist.length) {
                                if (ivrlist.length > 1) {
                                    var _fragment = document.createDocumentFragment();

                                    ivrlist.push({ strAgentServiceID: null, strAgentServiceDesc: resources.text.DoNotSelectIVR });

                                    ivrlist.forEach(function (value, index, array) {
                                        var $li = $('<li class="ivritem" data-ivrid="' + value.strAgentServiceID + '"/>'),
                                            $text = $('<dfn/>').text(value.strAgentServiceDesc);
                                        $li.append($text);
                                        _fragment.appendChild($li.get(0));
                                    });

                                    var listElem = _this.pop.ele.querySelector('.ivrlist');
                                    listElem.appendChild(_fragment);
                                    _this.pop.show();

                                    $(listElem).mCustomScrollbar({
                                        theme: 'dark-4',
                                        axis: "y"
                                    });

                                    $(listElem).bindevent('click', '.ivritem', function (e) {
                                        var $li = $(this),
                                            _id = $li.data('ivrid');
                                        if (_id) {
                                            _this.select(_id); //選擇IVR
                                        } else {
                                            _mediator.public.chatconnect.end(); //結束對話
                                        }
                                        _this.close();
                                    });
                                } else {
                                    _this.select(ivrlist[0].strAgentServiceID);
                                }
                            } else {
                                _this.select(null);
                            }
                        }
                    };
                    return new IVR();
                }()), //IVR產生及操作
                richmenu: (function () {
                    var richmenu = function () {
                        var _this = this;
                        this.container = $('.customerchat .richmenufield');
                        this.is_init = false;
                        this.is_open = false;
                    };
                    (function () {
                        this.initmenu = function (init) {
                            var _this = this;
                            this.is_init = init;
                            this.container.empty();
                            if (this.is_init) {
                                var _ul = document.createElement('UL');
                                if (resources.param.RichMenuList && resources.param.RichMenuList.length) {
                                    resources.param.RichMenuList.forEach(function (value, index, array) {
                                        var _handler = function () { return true; },
                                            _li = document.createElement('LI'),
                                            _span = document.createElement('SPAN'),
                                            _a = document.createElement('A');

                                        _a.href = 'javascript:void(0);';
                                        _span.appendChild(_a);
                                        _li.appendChild(_span);

                                        _ul.appendChild(_li);

                                        switch (value.Text.toLowerCase()) {
                                            case 'url':
                                                _handler = function (e) {
                                                    window.open(value.Value, '_blank');
                                                    _mediator.ajax.urlclick(value.Value);
                                                    _mediator.ajax.logclickaction('RichMenu', value.Value);
                                                };
                                                break;
                                            case 'string':
                                                _handler = function (e) {
                                                    _mediator.dom.inputtoolbar.sendmessage('richmenu', value.Value);
                                                };
                                                break;
                                            case 'url_param':
                                                _handler = function (e) {
                                                    var _url = value.Value.Format(_mediator.chatdata.chatid, _mediator.chatdata.channelid, '');
                                                    window.open(_url, '_blank');
                                                    _mediator.ajax.urlclick(_url);
                                                    _mediator.ajax.logclickaction('RichMenu', _url);
                                                };
                                                break;
                                        }

                                        _li.addEventListener('click', _handler);
                                    });
                                    _ul.classList.add(resources.param.RichMenuTemplate);
                                    var backgroundImage = 'url("{img}")'.Format({ img: resources.param.RichMenuImage });
                                    _ul.style.backgroundImage = backgroundImage;
                                    _this.container.append(_ul);
                                }
                            }
                        };
                        this.open = function () {
                            if (this.is_init && !this.is_open) {
                                _mediator.dom.autocomplete.hide();
                                _mediator.dom.uploadbox.hide(); //隱藏uploadbox
                                this.container.show();
                                _mediator.dom.chatmessagearea.scrollCtrl.init();
                                this.is_open = true;
                            }
                        };
                        this.close = function () {
                            if (this.is_init && this.is_open) {
                                this.container.hide();
                                _mediator.dom.chatmessagearea.scrollCtrl.init();
                                this.is_open = false;
                            }
                        };
                        this.setposition = function () {
                            this.container.get(0).style.bottom = '{0}px'.Format(this.container.parents('.te_ts_chat_footer').height());
                        };
                        this.autoExpand = function () {
                            if (JSON.parse(resources.param.RichMenuAutoExpand.toLowerCase())) {
                                _mediator.dom.richmenu.open();
                            } else {
                                _mediator.dom.richmenu.close();
                            }
                        };
                    }).call(richmenu.prototype);
                    return new richmenu();
                }()),
                embedview: (function () {
                    var embedview = function () {
                        this.target = new _template.newdiv();
                    };

                    embedview.prototype.open = function (url, withHeader) {
                        var _this = this,
                            dfd = $.Deferred();
                        _this.target.open(false);
                        _mediator.ajax.getembedview(url, withHeader)
                            .done(function (html) {
                                var $html = $('<div/>').append(html);
                                dfd.resolve(_this.target.loadhtml($html.html()));
                                _this.SetEvent();

                                _mediator.public.currentOpenPage.set(_this); //設定現在開啟的頁面
                            })
                            .fail(function (err) {
                                dfd.reject(err);
                            });
                        return dfd.promise();
                    };

                    embedview.prototype.SetEvent = function () {
                        var _this = this;
                        var _close = _this.target.container.find('.te_ts_icon_close,.confirm_btn').parent().get();
                        for (var i in _close) {
                            _close[i].onclick = _this.close.bind(_this);
                        }
                    }; //事件綁定

                    embedview.prototype.close = function () {
                        var _this = this;
                        return this.target.close(false).then(function () {
                            _mediator.public.currentOpenPage.clear(_this); //清除現在開啟的頁面
                        });
                    }; //關閉視窗

                    return new embedview();
                }()),
                surveywindow: (function () {
                    var surveywindow = function () {
                        this.target = new _template.newdiv();
                    };
                    surveywindow.prototype = {
                        open: function (channelID, surveyID, DirectLink) {
                            var _this = this,
                                dfd = $.Deferred();
                            _this.directLink = DirectLink;
                            if (_mediator.data.chat_open_type === 'iframe') {
                                DirectLink = false;
                            }
                            _this.target.open(_this.directLink);
                            _mediator.ajax.getsurveyview(channelID, surveyID, DirectLink)
                                .done(function (html) {

                                    var $html = $('<div/>').append(html);

                                    var text = $('.message', $html).text();
                                    $('.message', $html).empty();
                                    $('.message', $html).append(text);

                                    if (DirectLink && _mediator.data.chat_open_type !== 'iframe') {
                                        $('.header_icon', $html).remove();
                                    } //直連且不為iframe時不可關閉視窗
                                    dfd.resolve(_this.target.loadhtml($html.html()));
                                    _this.setEvent();
                                    _this.initScroll();
                                    _this.initStar(); //初始化滿意度分數設定

                                    _mediator.public.currentOpenPage.set(_this); //設定現在開啟的頁面
                                })
                                .fail(function (err) {
                                    dfd.reject(err);
                                });
                            return dfd.promise();
                        }, //開啟視窗
                        initScroll: function (forceupdate) {
                            var _this = this,
                                _is_mcs = !_mediator.data.is_mobile && $.fn.mCustomScrollbar, //非手機且有mCustomScrollbar則使用mCustomScrollbar
                                $scroll = $('.te_ts_chat_layout .content', _this.target.container),
                                setscroll = function () {
                                    var $content = $('.te_ts_chat_layout .content', _this.target.container);
                                    if (_is_mcs) {
                                        if (!$scroll.data('mCS')) {
                                            var _height = _this.target.frame.height();
                                            var _width = $content.width();
                                            $content.mCustomScrollbar({
                                                theme: 'dark-4',
                                                axis: "y",
                                                setHeight: _height,
                                                setWidth: _width
                                            });
                                        }
                                    } else {
                                        var _scroll = $content.get(0);
                                        if (_scroll.style.overflowY !== 'auto') {
                                            _scroll.style.overflowY = 'auto';
                                        }
                                    }
                                };
                            setscroll();
                        },
                        initStar: function () {
                            var $robot = $('.robotSurvey', this.target.container),
                                $agent = $('.agentSurvey', this.target.container);
                            if ($robot.length) {
                                var defaultrobotanswer = $robot.data('defaultanswer');
                                var $defaultrobotanswer = $('.star[data-id=' + defaultrobotanswer + ']', $robot);
                                if ($defaultrobotanswer.length) {
                                    $defaultrobotanswer.click();
                                }
                            }
                            if ($agent.length) {
                                var defaultagentanswer = $agent.data('defaultanswer');
                                var $defaultagentanswer = $('.star[data-id=' + defaultagentanswer + ']', $agent);
                                if ($defaultagentanswer.length) {
                                    $defaultagentanswer.click();
                                }
                            }
                        },
                        setEvent: function () {
                            var _this = this;
                            var _sub = _this.target.container.find('.submit_btn').get();
                            for (var i in _sub) {
                                _sub[i].onclick = _this.submit.bind(_this);
                            }
                            var _close = _this.target.container.find('.te_ts_icon_close,.confirm_btn').parent().get();
                            for (var i in _close) {
                                _close[i].onclick = _this.close.bind(_this);
                            }
                            var _star = _this.target.container.find('.star').get();
                            for (var i in _star) {
                                _star[i].onclick = _this.starclick;
                                _star[i].onmouseover = _this.starmouseover;
                                _star[i].onmouseout = _this.staronmouseleave;
                            }
                        },
                        starclick: function () {
                            var $starArea = $(this).parents('.stararea'),
                                _index = $('.star', $starArea).index($(this)) + 1;
                            $starArea.data('starindex', _index);
                            $('.te_ts_text_alert', $starArea).hide();
                            $('.te_ts_text_alert[data-id=' + _index + ']', $starArea).css('display', 'block');
                            //
                            $('.star path', $starArea).each(function (i, e) {
                                $(e).attr('class', $(e).attr('class').replace('selected', '').trim());
                            });
                            $('.star:lt(' + _index + ') path', $starArea).each(function (i, e) {
                                if (!($(e).attr('class').indexOf('selected') >= 0))
                                    $(e).attr('class', $(e).attr('class') + ' selected');
                            });
                        }, //星星click
                        starmouseover: function () {
                            var $starArea = $(this).parents('.stararea'),
                                _index = $('.star', $starArea).index($(this));
                            $(this).prevAll().add($(this)).find('path').each(function (i, e) {
                                if (!($(e).attr('class').indexOf('selected') >= 0))
                                    $(e).attr('class', $(e).attr('class') + ' selected');
                            });
                        }, //星星mouse over
                        staronmouseleave: function () {
                            var $starArea = $(this).parents('.stararea'),
                                _index = $('.star', $starArea).index($(this));
                            $('.star path', $starArea).each(function (i, e) {
                                $(e).attr('class', $(e).attr('class').replace('selected', '').trim());
                            });
                            var _starindex = $starArea.data('starindex') ? $starArea.data('starindex') : 0;
                            $('.star:lt(' + _starindex + ') path', $starArea).each(function (i, e) {
                                if (!($(e).attr('class').indexOf('selected') >= 0))
                                    $(e).attr('class', $(e).attr('class') + ' selected');
                            });
                        }, //星星mouse leave
                        submit: function () {
                            var _data = {},
                                loading = new _mediator.public.loading(),
                                $robot = $('.robotSurvey', this.target.container),
                                $agent = $('.agentSurvey', this.target.container),
                                dfd = $.Deferred();
                            if ($robot.length > 0) {
                                var _star = $('.stararea .star .selected', $robot).length;
                                var _surveyid = $robot.data('surveyid');
                                var _feedback = $('.feedback textarea', $robot).val();
                                var _score = $('.stararea .te_ts_text_alert:visible', $robot).data('score');
                                if (!_surveyid) {
                                    return false;
                                } else if (_star > 5 || _star <= 0) {
                                    _mediator.public.popup().Text(CustomerResources.text.SurveyInputHint);
                                    return false;
                                } else {
                                    _data['robot'] = { strRobotSurveyID: _surveyid, intSurveyScore: _score, strSurveyFeedback: _feedback };
                                }
                            }
                            if ($agent.length > 0) {
                                var _star = $('.stararea .star .selected', $agent).length;
                                var _surveyid = $agent.data('surveyid');
                                var _feedback = $('.feedback textarea', $agent).val();
                                var _score = $('.stararea .te_ts_text_alert:visible', $agent).data('score');
                                if (!_surveyid) {
                                    return false;
                                } else if (_star > 5 || _star <= 0) {
                                    _mediator.public.popup().Text(CustomerResources.text.SurveyInputHint);
                                    return false;
                                } else {
                                    _data['agent'] = { strOnlineSurveyID: _surveyid, intSurveyScore: _score, strSurveyFeedback: _feedback };
                                }
                            }
                            _data.chatid = _mediator.chatdata.chatid;
                            if (!$.isEmptyObject(_data)) {
                                loading.start();
                                var _this = this;
                                var _container = _this.target.container;
                                _mediator.ajax.completesurvey(_data)
                                    .done(function (data) {
                                        if (data.result) {
                                            $('.surveyMessage', _container).show();
                                        } else {
                                            _mediator.public.popup().Text(CustomerResources.text.SurveySubmitFailed);
                                        }
                                        dfd.resolve();
                                    })
                                    .fail(function (err) {
                                        dfd.reject(err);
                                    });
                            } else {
                                dfd.reject();
                            }
                            return dfd.promise().always(function () {
                                loading.over();
                            });
                        }, //送出問卷
                        close: function () {
                            var _this = this;
                            return this.target.close(_this.directLink).then(function () {
                                if (_this === _mediator.public.currentOpenPage) {
                                    _mediator.public.currentOpenPage.clear(_this); //清除現在開啟的頁面
                                }
                            });
                        } //關閉視窗
                    };
                    return new surveywindow();
                }()), //滿意度問卷
                customercomment: (function () {
                    var customercomment = function () {
                        var _this = this;
                        this.target = new _template.newdiv();
                        this.target.container.id = 'customercomment';
                        _this.container = this.target.container;
                    };
                    customercomment.prototype = {
                        open: function (DirectLink, channelID, customerID, chatID, frompage) {
                            var _this = this,
                                dfd = $.Deferred();
                            frompage = typeof frompage === undefined ? '' : frompage;
                            if (!DirectLink) {
                                channelID = _mediator.chatdata.channelid || channelID;
                                customerID = _mediator.chatdata.customerid || customerID;
                                chatID = _mediator.chatdata.chatid || chatID;
                            } //若為網址直連則從外面讀ID, 非直連則從chatdata讀取

                            _this.directLink = DirectLink;

                            $.when(_mediator.ajax.checkWorkHours(channelID)).then(function (data) {
                                var _InTime = data.status === 'AllowComment',
                                    _noticeText = data.notice;

                                if (!_InTime && !DirectLink) {
                                    _mediator.public.popup().Text(_noticeText);
                                } //非營業時間 & 非直連
                                else {
                                    _this.target.open(DirectLink);
                                    _mediator.ajax.getcommetview(channelID)
                                        .done(function (html) {
                                            var $html = $('<div/>').append(html);
                                            if (_InTime) {
                                                _mediator.public.popup().Text(_noticeText);
                                                if (DirectLink && _mediator.data.chat_open_type !== 'iframe') {
                                                    $('.header_icon', $html).remove();
                                                } //直連且不為iframe時不可關閉視窗
                                            } //營業時間
                                            else {
                                                _mediator.public.popup({ button: [], close: null }).Text(_noticeText);
                                            } //非營業時間(不可填寫，完全阻擋)

                                            $('#isDirectLink', $html).val(DirectLink);//是否為直連問卷
                                            $('#strChannelID', $html).val(channelID);
                                            $('#strCustomerID', $html).val(customerID);
                                            $('#strChatID', $html).val(chatID);
                                            $('#frompage', $html).val(frompage);
                                            _this.target.loadhtml($html.html()).done(function () {
                                                _this.bindEvent(frompage, channelID, customerID);
                                                _this.initScroll();

                                                $('#strComment', _this.container).val('');

                                                dfd.resolve();
                                            }).then(function () {
                                                _mediator.public.currentOpenPage.set(_this); //設定現在開啟的頁面
                                            });
                                        })
                                        .fail(function (err) {
                                            dfd.reject(err);
                                        });
                                }
                            });
                            return dfd.promise();
                        }, //開啟視窗
                        close: function (frompage, channelID, customerID) {
                            var _this = this;
                            return this.target.close(this.directLink, frompage, channelID, customerID).then(function () {
                                _mediator.public.currentOpenPage.clear(_this); //清除現在開啟的頁面
                            });
                        }, //關閉視窗
                        bindEvent: function (frompage, channelID, customerID) {
                            var _this = this,
                                _handler = {
                                    nameblur: function (e) {
                                        if (this.value !== "") {
                                            $('#strNameAlert', _this.container).text("");
                                        }
                                    }, //檢查姓名欄位
                                    mobileblur: function (e) {
                                        if (this.value !== "") {
                                            $('#strMobileAlert', _this.container).text("");
                                        }
                                    }, //檢查姓名欄位
                                    emailblur: function (e) {
                                        if (this.value !== "") {
                                            _this.checkemail(this.value);
                                        }
                                    }, //檢查email欄位
                                    uploadfile: function (e) {
                                        _this.uploadfile(e);
                                    }, //上傳附件
                                    commentblur: function (e) {
                                        if (this.value !== "") {
                                            $('#strCommentAlert', _this.container).text("");
                                        }
                                    }, //檢查留言欄位
                                    submitcomment: function () {
                                        _this.submitcomments();
                                    }, //送出留言
                                    closeComment: function () {
                                        _this.close(frompage, channelID, customerID);
                                    } //關閉留言頁面
                                };

                            _this.container
                                .bindevent('blur', '#strName', _handler.nameblur)
                                .bindevent('blur', '#strMobile', _handler.mobileblur)
                                .bindevent('blur', '#strEmail', _handler.emailblur)
                                .bindevent('change', '#UploadFile', _handler.uploadfile)
                                .bindevent('blur', '#strComment', _handler.commentblur)
                                .bindevent('click', '#custCommentSubmit', _handler.submitcomment)
                                .bindevent('click', '#closeComment', _handler.closeComment);
                        },
                        initScroll: function () {
                            var _this = this,
                                _is_mcs = !_mediator.data.is_mobile && $.fn.mCustomScrollbar, //非手機且有mCustomScrollbar則使用mCustomScrollbar
                                $scroll = $('.te_ts_chat_layout #scrollarea', _this.target.container),
                                setscroll = function () {
                                    $scroll.css('height', '100%');
                                    if (_is_mcs) {
                                        if (!$scroll.data('mCS')) {
                                            $scroll.mCustomScrollbar({
                                                theme: 'dark-4',
                                                axis: "y"
                                            });
                                        }
                                    } else {
                                        var _scroll = $scroll.get(0);
                                        if (_scroll.style.overflowY !== 'auto') {
                                            _scroll.style.overflowY = 'auto';
                                        }
                                    }
                                };
                            setscroll();
                        },
                        checkemail: function (email) {
                            var $email = $('#strEmail', this.target.container),
                                $emailalert = $('#strEmailAlert', this.target.container);
                            //email正規語法
                            var pattern = new RegExp(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.([A-Za-z]{2,4})$/);

                            if (!pattern.test(email)) {
                                $emailalert.text(resources.text.EmailFormatWrong);
                                $email.val("");
                                $email.focus();
                                return false;
                            }
                            else {
                                $emailalert.text("");
                            }
                        }, //檢查email欄位
                        uploadfile: function (e) {
                            if (e.target.files.length == 0) {
                                return false;
                            }
                            var file = e.target.files[0]; // FileList object

                            //只允許上傳PNG、JPG、JPEG、BMP檔
                            if (!(file.type.match('image/png') || file.type.match('image/jpg') || file.type.match('image/jpeg') || file.type.match('image/bmp'))) {
                                _mediator.public.popup().Text(resources.text.FormateIsNotMatch);
                                return false;
                            }

                            //圖檔大小限制
                            var limitedKB = resources.param.UploadFileLimit; //上傳檔案大小限制
                            if (file.size / 1024 > limitedKB) {
                                _mediator.public.popup().Text(resources.text.SizeIsNotMatch);
                                return false;
                            }

                            //預覽圖片
                            Base64ImageProcessor(file, function (Image) {
                                $('#strFilePath').val(Image.getBase64());
                                $('#showFileName').text(file.name);
                            });
                        }, //上傳附件
                        submitcomments: function () {
                            var _this = this,
                                dfd = $.Deferred(),
                                _container = this.target.container,
                                $name = $('#strName', _container),
                                $namealert = $('#strNameAlert', _container),
                                $mobile = $('#strMobile', _container),
                                $commentMobileRequiredTag = $('#commentMobileRequiredTag', _container),
                                $mobilealert = $('#strMobileAlert', _container),
                                $email = $('#strEmail', _container),
                                $emailalert = $('#strEmailAlert', _container),
                                $submit = $('#custCommentSubmit', _container),
                                $comment = $('#strComment', _container),
                                $commentalert = $('#strCommentAlert', _container);
                            $form = $('#commentform', _container);
                            $frompage = $('#frompage', _container);
                            $strChannelID = $('#strChannelID', _container);
                            $strCustomerID = $('#strCustomerID', _container);

                            debugger;

                            if ($comment.val() === "" || ($commentMobileRequiredTag.text().length > 0 && $mobile.val() === "") || $email.val() === "" || $name.val() === "") {

                                if ($comment.val() === "") {
                                    $commentalert.text(resources.text.RequiredFields.replace("{0}", $comment.siblings('dfn').text()));
                                    $comment.focus();
                                }

                                if ($email.val() === "") {
                                    $emailalert.text(resources.text.RequiredFields.replace("{0}", $email.siblings('dfn').text()));
                                    $email.focus();
                                }

                                if ($commentMobileRequiredTag.text().length > 0 && $mobile.val() === "") {
                                    $mobilealert.text(resources.text.RequiredFields.replace("{0}", $mobile.siblings('dfn').text()));
                                    $mobile.focus();
                                }

                                if ($name.val() === "") {
                                    $namealert.text(resources.text.RequiredFields.replace("{0}", $name.siblings('dfn').text()));
                                    $name.focus();
                                }
                                dfd.resolve();
                            }
                            else {
                                $submit.prop('disabled', true);
                                $submit.addClass('disabled');
                                var loading = new _mediator.public.loading();
                                loading.start();
                                _mediator.ajax.savecustomercomment($form.serialize()).done(function (status) {
                                    loading.over();
                                    switch (status.status) {
                                        case "noCustomerID":
                                            _mediator.dom.openNoServicePage.open(); //開啟沒有服務頁
                                            break;
                                        case "commentFail":
                                            _mediator.dom.openNoServicePage.open(); //開啟沒有服務頁
                                            break;
                                        case "mailFail":
                                            var _mailfailtext = '信件寄出失敗(仮)';
                                            if (_this.directLink) {
                                                _mediator.public.popup({ button: [], close: null }).Text(_mailfailtext);
                                            } //直連
                                            else {
                                                _mediator.public.popup().Text(_mailfailtext);
                                            }
                                            break;
                                        case "Success":
                                            if (_this.directLink) {
                                                _mediator.public.popup({ button: [], close: null }).Text(status.notice);
                                            } //直連
                                            else {
                                                switch ($frompage.val()) {
                                                    case "openNoServicePage":
                                                        _mediator.public.popup({
                                                            close: null,
                                                            button: [{
                                                                text: resources.text.Sure,
                                                                callback: function () {
                                                                    _this.close(); //關閉留言頁面
                                                                    _mediator.dom.openNoServicePage.open(true, $strChannelID.val(), $strCustomerID.val());
                                                                }
                                                            }]
                                                        }).Text(status.notice);
                                                        break;
                                                    default:
                                                        _mediator.public.popup({
                                                            close: null,
                                                            button: [{
                                                                text: resources.text.Sure,
                                                                callback: function () {
                                                                    _this.close(); //關閉留言頁面
                                                                }
                                                            }]
                                                        }).Text(status.notice);
                                                        break;
                                                }
                                            }
                                            break;
                                    }
                                    $submit.prop('disabled', false);
                                    $submit.remove('disabled');
                                    dfd.resolve();
                                });
                            }
                            return dfd.promise();
                        } //送出留言
                    };
                    return new customercomment();
                }()), //我要留言
                accountBindingPage: (function () {
                    var accountBinding = function () {
                        this.target = new _template.newdiv();
                    };
                    accountBinding.prototype = {
                        open: function (url, skip) {
                            if (skip)
                                window.location = url;
                            var _this = this,
                                dfd = $.Deferred();
                            _this.target.open(true);
                            _this.targetUrl = url;
                            _mediator.ajax.getaccountbindingview()
                                .done(function (html) {
                                    var $html = $('<div/>').append(html);
                                    $('.header_icon', $html).remove();
                                    dfd.resolve(_this.target.loadhtml($html.html()));
                                    _this.setEvent();
                                    _this.initScroll();

                                    _mediator.public.currentOpenPage.set(_this); //設定現在開啟的頁面
                                })
                                .fail(function (err) {
                                    dfd.reject(err);
                                });
                            return dfd.promise();
                        },
                        setEvent: function () {
                            var _this = this;
                            _this.target.container.find('[name=binding_check]').get(0).onclick = function () {
                                if (_this.target.container.find('[name=binding_check]').prop('checked'))
                                    _this.target.container.find('[name=binding_btn]').removeClass('disabled');
                                else
                                    _this.target.container.find('[name=binding_btn]').addClass('disabled');
                            };
                            _this.target.container.find('[name=binding_btn]').get(0).onclick = function () {
                                if (_this.target.container.find('[name=binding_check]').prop('checked')) {
                                    window.location = _this.targetUrl;
                                }
                            };
                        },
                        initScroll: function (forceupdate) {
                            var _this = this,
                                _is_mcs = !_mediator.data.is_mobile && $.fn.mCustomScrollbar, //非手機且有mCustomScrollbar則使用mCustomScrollbar
                                $scroll = $('.te_ts_chat_layout .content', _this.target.container),
                                setscroll = function () {
                                    var $content = $('.te_ts_chat_layout .content', _this.target.container);
                                    if (_is_mcs) {
                                        if (!$scroll.data('mCS')) {
                                            var _height = _this.target.frame.height();
                                            var _width = $content.width();
                                            $content.mCustomScrollbar({
                                                theme: 'dark-4',
                                                axis: "y",
                                                setHeight: _height,
                                                setWidth: _width
                                            });
                                        }
                                    } else {
                                        var _scroll = $content.get(0);
                                        if (_scroll.style.overflowY !== 'auto') {
                                            _scroll.style.overflowY = 'auto';
                                        }
                                    }
                                };
                            setscroll();
                        },
                        close: function () {
                            var _this = this;
                            return this.target.close(true).then(function () {
                                _mediator.public.currentOpenPage.clear(_this); //清除現在開啟的頁面
                            });
                        } //關閉視窗
                    };
                    return new accountBinding();
                }()), //幫定頁面
                openErrorPage: (function () {
                    var openErrorPage = function () {
                        var _this = this;
                        this.target = new _template.newdiv();
                        this.target.container.id = 'errorpage';
                        _this.container = this.target.container;

                        var _handler = {
                            closePage: function () {
                                _this.close();
                            } //關閉無服務頁面
                        };

                        _this.container
                            .bindevent('click', '#closePage', _handler.closePage);
                    };
                    openErrorPage.prototype = {
                        open: function (DirectLink, channelid) {
                            var _this = this,
                                dfd = $.Deferred();
                            _this.target.open(DirectLink);
                            _mediator.ajax.geterrorview(_mediator.chatdata.channelid || channelid)
                                .done(function (html) {
                                    var $html = $('<div/>').append(html);
                                    if (_mediator.data.chat_open_type !== 'iframe') {
                                        $('.header_icon', $html).remove();
                                    }
                                    dfd.resolve(_this.target.loadhtml($html.html()));

                                    _mediator.public.currentOpenPage.set(_this); //設定現在開啟的頁面
                                })
                                .fail(function (err) {
                                    dfd.reject(err);
                                });
                            return dfd.promise();
                        }, //開啟視窗
                        close: function () {
                            var _this = this;
                            return this.target.close(true).then(function () {
                                _mediator.public.currentOpenPage.clear(_this); //清除現在開啟的頁面
                            });
                        } //關閉視窗
                    };
                    return new openErrorPage();
                }()), //錯誤頁面
                openNoServicePage: (function () {
                    var openNoServicePage = function () {
                        var _this = this;
                        this.target = new _template.newdiv();
                        this.target.container.id = 'noservicepage';
                        _this.container = this.target.container;

                        var _handler = {
                            closePage: function () {
                                _this.close();
                            } //關閉無服務頁面
                        };
                        _this.container
                            .bindevent('click', '#closePage', _handler.closePage);
                    };
                    openNoServicePage.prototype = {
                        open: function (DirectLink, channelid, customerid) {
                            var _this = this,
                                dfd = $.Deferred();
                            channelid = _mediator.chatdata.channelid || channelid;
                            customerid = _mediator.chatdata.customerid || customerid;
                            _this.target.open(DirectLink);
                            _mediator.ajax.getnoserviceview(_mediator.chatdata.channelid || channelid, _mediator.chatdata.chatid)
                                .done(function (html) {
                                    _this.container.bindevent('click', '#closePage', function () {
                                        _this.close();
                                    }); //關閉無服務頁面

                                    //處理換行(html encode換成decode)
                                    var div = document.createElement('div');
                                    div.innerHTML = html;
                                    var h2 = $('h2', div).text();
                                    $('h2', div).html(h2);
                                    html = div.innerHTML;
                                    var $html = $('<div/>').append(html);
                                    if (_mediator.data.chat_open_type !== 'iframe') {
                                        $('.header_icon', $html).remove();
                                    }
                                    dfd.resolve(_this.target.loadhtml($html.html())).done(function () {
                                        var _btntemplate = document.querySelector('#OpenComment');
                                        if (_btntemplate) {
                                            _btntemplate.onclick = function () {
                                                _this.target.close();
                                                _mediator.dom.customercomment.open(false, channelid, customerid, '', 'openNoServicePage');
                                            };
                                        }

                                    }).then(function () {
                                        _mediator.public.currentOpenPage.set(_this); //設定現在開啟的頁面
                                    });
                                })
                                .fail(function (err) {
                                    dfd.reject(err);
                                });
                            return dfd.promise();
                        }, //開啟視窗
                        close: function () {
                            var _this = this;
                            return this.target.close(true).then(function () {
                                _mediator.public.currentOpenPage.clear(_this); //清除現在開啟的頁面
                            });
                        }//關閉視窗
                    };
                    return new openNoServicePage();
                }()), //沒有服務頁
                unhelpwindow: (function () {
                    var unhelpwindow = function () {
                        var _this = this;
                        this.target = new _template.newdiv();
                        this.target.container.id = 'unhelpwindow';
                        _this.container = this.target.container;
                    };
                    var chatid = null;
                    unhelpwindow.prototype = {
                        open: function (chatdetail, DirectLink) {
                            chatid = chatdetail;
                            var _this = this,
                                dfd = $.Deferred();
                            _this.directLink = DirectLink;
                            if (_mediator.data.chat_open_type === 'iframe') {
                                DirectLink = false;
                            }
                            _this.target.open(_this.directLink);
                            _mediator.ajax.getunhelpview(DirectLink)
                                .done(function (html) {

                                    var $html = $('<div/>').append(html);

                                    var text = $('.message', $html).text();
                                    $('.message', $html).empty();
                                    $('.message', $html).append(text);

                                    if (DirectLink && _mediator.data.chat_open_type !== 'iframe') {
                                        $('.header_icon', $html).remove();
                                    } //直連且不為iframe時不可關閉視窗

                                    dfd.resolve(_this.target.loadhtml($html.html()));
                                    _this.setEvent();
                                    _this.bindEvent();

                                    _mediator.public.currentOpenPage.set(_this); //設定現在開啟的頁面
                                })
                                .fail(function (err) {
                                    dfd.reject(err);
                                });
                            return dfd.promise();
                        }, //開啟視窗
                        bindEvent: function () {
                            var _this = this,
                                _handler = {
                                    submitblur: function (e) {
                                        $submit = $('#unHelpSubmit', _this.container);
                                        if ($('input[name="unHelp_check"]:checked').length === 0 && $('#unHelpComment', _this.container).val() === "") {
                                            $submit.prop('disabled', true);
                                            $submit.addClass('disabled');
                                        } else {
                                            $submit.prop('disabled', false);
                                            $submit.removeClass('disabled');
                                            $submit.remove('disabled');
                                        }
                                    }
                                };

                            _this.container
                                .bindevent('change', '#unHelp_check1', _handler.submitblur)
                                .bindevent('change', '#unHelp_check2', _handler.submitblur)
                                .bindevent('change', '#unHelp_check3', _handler.submitblur)
                                .bindevent('input', '#unHelpComment', _handler.submitblur);
                        },
                        setEvent: function () {
                            var _this = this;
                            var _sub = _this.target.container.find('.submit_btn').get();
                            for (var i in _sub) {
                                _sub[i].onclick = _this.submit.bind(_this);
                            }
                            var _close = _this.target.container.find('.te_ts_icon_close').parent().get();
                            for (var i in _close) {
                                _close[i].onclick = _this.close.bind(_this);
                            }
                        },
                        submit: function () {
                            var _this = this,
                                dfd = $.Deferred(),
                                _container = this.target.container,
                                _container = this.target.container,
                                $comment = $('#unHelpComment', _container);
                            const selectedValues = $('input[name="unHelp_check"]:checked').map(function () {
                                return $(this).val();
                            }).get().join(', ');
                            dfd.resolve();
                            _mediator.sendmessage(MessageType.UnHelp, { chatdetailid: chatid, comment: $comment.val(), selectvalue: selectedValues }).done(function () {
                                _this.close(); //關閉留言頁面
                                $('.alert-thanks', this.frame).css('display', '');
                                setTimeout(function () {
                                    $('.alert-thanks', this.frame).css('display', 'none');
                                }, 3000); // 顯示0.3秒自動消失
                            });
                            return dfd.promise();
                        }, //送出問卷
                        close: function () {
                            var _this = this;
                            return this.target.close(_this.directLink).then(function () {
                                if (_this === _mediator.public.currentOpenPage) {
                                    _mediator.public.currentOpenPage.clear(_this); //清除現在開啟的頁面
                                }
                            });
                        } //關閉視窗
                    };
                    return new unhelpwindow();
                }()), //無幫助Popup
                adjustWindow: function () {
                    window.scrollTo(0, 0);
                    _mediator.postparent('adjustwindow');
                } //調整頁面位置
            }, //dom操作封裝
            ajax: {
                getautocomplete: function (keywordarr) {
                    return $.ajax({
                        url: resources.url.getautocomplete,
                        type: "POST",
                        cache: false,
                        data: {
                            keyword: keywordarr.join('%'),
                            channelID: _mediator.chatdata.channelid,
                            ismobile: (_mediator.data.is_mobile) ? true : false
                        }
                    });
                }, //get autocomplete list
                autocompleteclick: function (id, desc) {
                    return $.ajax({
                        url: resources.url.autocompleteclick,
                        type: "POST",
                        data: {
                            customer: _mediator.chatdata.customerid,
                            id: id,
                            desc: desc
                        }
                    });
                }, //record autocomplete click
                logclickaction: function (action,url) {
                    return $.ajax({
                        url: resources.url.logclickaction,
                        type: "POST",
                        data: {
                            customer: _mediator.chatdata.customerid,
                            chatid: _mediator.chatdata.chatid || '',
                            action: action,
                            data: url
                        }
                    });
                },//Log_ClickAction
                urlclick: function (url) {
                    return $.ajax({
                        url: resources.url.urlclick,
                        type: "POST",
                        data: {
                            customer: _mediator.chatdata.customerid,
                            chatid: _mediator.chatdata.chatid || '99999-99999-99999-99999-99999',
                            content: url
                        }
                    });
                }, //record url click
                getpromote: function (chatID, promoteID, TEPROD) {
                    return $.ajax({
                        url: resources.url.getpromote,
                        type: "POST",
                        data: { chatID: chatID, promoteID: promoteID, TEPROD: TEPROD }
                    });
                }, //推播語：內部推播語
                insertbannerlog: function (chatID, promoteID) {
                    return $.ajax({
                        url: resources.url.insertbannerlog,
                        type: "POST",
                        data: {
                            chatID: chatID,
                            promoteID: promoteID
                        }
                    });
                }, //推播語：點擊Banner
                getsurveyview: function (channelID, surveyID, DirectLink) {
                    return $.ajax({
                        url: resources.url.getsurveyview,
                        type: "POST",
                        data: { ChannelID: channelID, SurveyID: surveyID, ysnDirect: DirectLink }
                    });
                }, //取得survey view html
                getcommetview: function (channelID) {
                    return $.ajax({
                        url: resources.url.getcommetview,
                        type: "POST",
                        data: { channelID: channelID }
                    });
                }, //取得customercomment html
                getaccountbindingview: function () {
                    return $.ajax({
                        url: resources.url.getaccountbindingview,
                        type: "POST"
                    });
                }, //取得account binding view html
                completesurvey: function (obj) {
                    return $.ajax({
                        url: CustomerResources.url.completesurvey,
                        type: "POST",
                        data: obj
                    });
                }, //completesurvey
                completeunhelppopup: function (obj) {
                    return $.ajax({
                        url: CustomerResources.url.completeunhelppopup,
                        type: "POST",
                        data: obj
                    });
                }, //completeunhelppopup
                savecustomercomment: function (data) {
                    return $.ajax({
                        url: resources.url.savecustomercomment,
                        data: data,
                        type: "POST",
                        dataType: "json",
                        cache: false
                    });
                }, //儲存客戶留言
                checkWorkHours: function (strChannelID, strCustomerID) {
                    return $.ajax({
                        url: resources.url.checkWorkHours,
                        data: {
                            strChannelID: strChannelID,
                            strCustomerID: strCustomerID
                        },
                        type: "POST",
                        dataType: "json",
                        cache: false
                    });
                }, //檢查是否在可留言時間&是否留言過
                geterrorview: function () {
                    return $.ajax({
                        url: resources.url.ErrorPage,
                        type: "POST"
                    });
                }, //開啟沒有服務頁
                getnoserviceview: function (strChannelID, strChatID) {
                    return $.ajax({
                        url: resources.url.NoServicePage,
                        data: { channelID: strChannelID, chatID: strChatID },
                        type: "POST"
                    });
                }, //開啟沒有服務頁
                getembedview: function (url, withHeader) {
                    return $.ajax({
                        url: resources.url.getembedview,
                        type: "POST",
                        data: { url: url, withHeader: withHeader }
                    });
                }, //取得嵌入頁面
                uploadwebmessage: function (msgobj) {
                    var limitedKB = resources.param.HttpFileUploadLimit, //系統限制request長度
                        ajaxdata = { data: JSON.stringify(msgobj), chatid: _mediator.chatdata.chatid };
                    if (JSON.stringify(ajaxdata).length > limitedKB * 1024 * 0.8) {
                        var dfd = $.Deferred(),
                            options = {
                                bufferurl: resources.url.ajaxbuffer,
                                limit: limitedKB * 1024,
                                dataobj: ajaxdata
                            };
                        ajaxBuffer(options).done(function (id) {
                            $.ajax({
                                url: resources.url.uploadwebmessage,
                                type: "POST",
                                data: { data: id, buffer: true }
                            })
                                .done(function (data) {
                                    dfd.resolve(data);
                                })
                                .fail(function (err) {
                                    dfd.reject(err);
                                });
                        }).fail(function (err) {
                            dfd.reject(err);
                        });
                        return dfd.promise();
                    }
                    else {
                        return $.ajax({
                            url: resources.url.uploadwebmessage,
                            type: "POST",
                            data: ajaxdata
                        });
                    }
                }, //將訊息記到WebMessageList
                getrichcontentgroup: function (KeyId, ChatId) {
                    return $.ajax({
                        url: resources.url.getrichcontenthtmlgroup,
                        data: { KeyId: KeyId, ChatId: ChatId },
                        type: "POST"
                    });
                },
                getautocompletecount: function () {
                    return $.ajax({
                        url: resources.url.getautocompletecount,
                        data: { channelID: _mediator.chatdata.channelid, ismobile: (_mediator.data.is_mobile) ? true : false },
                        type: "POST",
                        success: function (data) {
                            return data;
                        }
                    })
                }, //get autocomplete list
                getunhelpview: function (channelID, surveyID, DirectLink) {
                    return $.ajax({
                        url: resources.url.getunhelpview,
                        type: "POST",
                        data: { ChannelID: channelID, SurveyID: surveyID, ysnDirect: DirectLink }
                    });
                }, //取得unhelp view html
            }, //ajax呼叫(用done & fail處理回傳內容)
            parentpost: function (type, obj) {
                _mediator.postparent(type, obj);
            }, //postMessage to parent window
            chatdata: {
                get: function () {
                    return _mediator.chatdata;
                },
                set: function (obj) {
                    _mediator.chatdata.chatid = obj.ChatID || _mediator.chatdata.chatid;
                    _mediator.chatdata.customerid = obj.CustomerID || _mediator.chatdata.customerid;
                    _mediator.chatdata.channelid = obj.ChannelID || _mediator.chatdata.channelid;

                    if (obj.Status) {
                        this.statuschange(obj.Status, true);
                    }

                    _mediator.public.chatconnect.renewchat();
                },
                windowstatuschange: function (status) {
                    if (_mediator.chatdata.windowstatus !== status) {
                        _mediator.chatdata.windowstatus = status;
                        if (_mediator.chatdata.windowstatus) {
                            _mediator.postparent('notread', false);
                        }
                    }
                    return true;
                },
                statuschange: function (status, init) {
                    if (_mediator.chatdata.status !== status) {
                        _mediator.dom.inputtoolbar.imageuploadenable(false);
                        _mediator.dom.inputtoolbar.messageboxenable(false);
                        switch (status) {
                            case 'Unknown':
                                _mediator.dom.richmenu.autoExpand(); //RichMenu是否自動開啟
                                break;
                            case 'BOT':
                                _mediator.dom.inputtoolbar.messageboxenable(true);
                                break;
                            case 'AgentOnlyWelcome':
                                var WEB_Message = {
                                    strMessageType: MessageType.SendChatMessage,
                                    Message: {
                                        strMessageType: MessageType.TextMessage,
                                        strChatID: _mediator.chatdata.chatid,
                                        strSender: 'System',
                                        strMessage: resources.param.AgentOnlyWelcome
                                    }
                                },
                                    _msgobj = ToChatMsgObject(WEB_Message);
                                _mediator.dom.chatmessagearea.newmessage(_msgobj);
                                _mediator.dom.quickoption.agentonlywelcome();
                                _mediator.dom.richmenu.close();
                                break;
                            case 'IVR':
                                _mediator.dom.richmenu.close();
                                break;
                            case 'Queue':
                                _mediator.dom.IVR.close();
                                _mediator.dom.quickoption.queue();
                                _mediator.dom.richmenu.close();
                                break;
                            case 'Dialog':
                                _mediator.dom.inputtoolbar.messageboxenable(true);
                                _mediator.dom.inputtoolbar.imageuploadenable(true);
                                break;
                            case 'NoService':
                                _mediator.public.chatconnect.end();
                                _mediator.public.openNoServicePage();
                                _mediator.dom.richmenu.close();
                                break;
                        }
                        _mediator.chatdata.status = status;
                    }
                    return true;
                },
                init: function () {
                    _mediator.public.chatconnect.oldchatid = _mediator.chatdata.chatid || '';
                    _mediator.chatdata = {
                        chatid: '',
                        customerid: '',
                        channelid: '',
                        status: '',
                        windowstatus: true
                    };
                }
            },
            public: {
                chatconnect: (function () {
                    var chatconnect = function () {
                        this.oldchatid = '';
                        this.chatid = '';
                        this.connect = false; //signalR是否連線 
                        this.newcall = false; //是否呼叫新chat
                        this.connectpop = null;
                        this.poptimer = null; //popuptimer
                    };
                    chatconnect.prototype = {
                        new: function () {
                            var _this = this,
                                loading = new _mediator.public.loading(),
                                dfd = $.Deferred();
                            if (!this.connect) {
                                this.newcall = true;
                                dfd.resolve();
                                return dfd;
                            }
                            else {
                                loading.start();
                                var connobj = JSON.parse(JSON.stringify(viewdata.ChatObj)),
                                    customeParameter = _mediator.data.customeParameter.get();
                                connobj.ChatInfo = {
                                    strIPaddress: viewdata.ChatInfo.IPAddress,
                                    strDeviceID: _mediator.data.device,
                                    UserTime: DateFormat(new Date(), 'yyyy/MM/dd HH:mm:ss')
                                };
                                if (customeParameter) {
                                    for (var key in customeParameter) {
                                        if (!connobj.ChatInfo[key]) {
                                            connobj.ChatInfo[key] = customeParameter[key];
                                        }
                                    }
                                }
                                _mediator.sendmessage(MessageType.CustomerUserConnected, connobj).done(function () {
                                    loading.over();
                                    _this.newcall = false;
                                    dfd.resolve();
                                });
                                return dfd.promise();
                            }
                        }, //客戶主動建立新chat
                        end: function (shutdownType) {
                            var _this = this,
                                dfd = $.Deferred(),
                                _obj = {
                                    strChatID: _mediator.chatdata.chatid,
                                    shutdownType: shutdownType || 'CustomerEndCall'
                                };
                            _mediator.sendmessage(MessageType.ChatEnd, _obj).done(function () {
                                dfd.resolve();
                            });
                            return dfd.promise();
                        }, //客戶主動結束chat
                        renewchat: function (chatid) {
                            if (_mediator.chatdata.chatid) {
                                this.oldchatid = this.chatid;
                                this.chatid = _mediator.chatdata.chatid;
                            }
                        }, //更新chat
                        connectstatechange: function (oldState, newState) {
                            var _this = this,
                                _type = oldState + ' ' + newState;
                            if (_this.connectpop) {
                                _this.connectpop.Close();
                            }
                            if (_this.poptimer) {
                                clearTimeout(_this.poptimer);
                            }
                            switch (newState) {
                                case $.signalR.connectionState.connected:
                                    switch (oldState) {
                                        case $.signalR.connectionState.connecting:
                                            this.connect = true;

                                            var _clearpop = function () { _this.connectpop = null; },
                                                popoptions = {
                                                    button: [{ text: resources.text.Sure, callback: _clearpop }],
                                                    close: { fn: _clearpop }
                                                };
                                            _this.connectpop = _mediator.public.popup(popoptions).Text(resources.text.SignalRConnected);
                                            setTimeout(function () {
                                                if (_this.connectpop) {
                                                    _this.connectpop.Close();
                                                    _clearpop();
                                                }
                                            }, 300); //顯示0.3秒自動消失

                                            if (this.newcall || _mediator.chatdata.chatid) {
                                                this.new(); //新對話
                                            }
                                            break;
                                        case $.signalR.connectionState.reconnecting:
                                            _mediator.sendmessage(MessageType.CustomerReconnectStatus); //查詢狀態
                                            break;
                                    }
                                    break;
                                case $.signalR.connectionState.connecting:
                                case $.signalR.connectionState.reconnecting:
                                    var _text = newState === $.signalR.connectionState.connecting ?
                                        resources.text.SignalRConnecting : resources.text.SignalRReonnecting;

                                    _this.poptimer = setTimeout(function () {
                                        var popoptions = { button: [], close: null };
                                        _this.connectpop = _mediator.public.popup(popoptions).Text(_text);
                                    }, 500); //0.5秒內未更新狀態則顯示訊息
                                    break;
                                case $.signalR.connectionState.disconnected:
                                    this.connect = false;
                                    var popoptions = {
                                        button: [
                                            {
                                                text: resources.text.SignalRRefresh,
                                                callback: function () {
                                                    return _mediator.reConnect();
                                                }
                                            }
                                        ],
                                        close: null
                                    };
                                    _this.connectpop = _mediator.public.popup(popoptions).Text(resources.text.SignalRDisconnected);
                                    break;
                            }
                        }
                    };
                    return new chatconnect();
                }()), //連線管理
                passoption: function (caption, postback) {
                    var dataobj = {
                        caption: caption,
                        postback: postback || caption
                    };

                    //textNode, 避免html tag
                    var Element = document.createElement('DIV');
                    Element.appendChild(document.createTextNode(dataobj.caption));
                    dataobj.caption = Element.innerHTML;

                    var WEB_Message = {
                        strMessageType: MessageType.CustomerSendMessage,
                        Message: {
                            strMessageType: MessageType.TextMessage,
                            strMessage: dataobj.caption,
                            strChatDetailID: NewID()
                        }
                    };
                    _mediator.dom.chatmessagearea.newmessage(ToChatMsgObject(WEB_Message), true);

                    if (_mediator.chatdata.status === 'BOT') {
                        WEB_Message.Message.strMessageType = MessageType.OptionMessage;
                        WEB_Message.Message.strMessage = JSON.stringify(dataobj);
                    }
                    return _mediator.public.customersendmessage(WEB_Message);
                }, //傳送選項 to robot
                openNoServicePage: function () {
                    return _mediator.dom.openNoServicePage.open();
                }, //開啟沒有服務頁
                popup: function (options) {
                    var popup = function () {
                        var defaults = {
                            button: [{ text: resources.text.Sure, callback: null }], //預設為確定，不執行任何function
                            close: {
                                fn: null
                            } //if close === null then hide close button
                        };
                        this.option = $.extend(defaults, options);

                        var popupwrapobj = new _template.popupmask(),
                            $popwrap = $('<div class="te_ts_chat_popup te_ts_tx_c"/>'),
                            $popbox = $('<div class="te_ts_wrap_inner_s"/>'),
                            $closehref = $('<a class="te_ts_po_ab_tr close" href="javascript:void(0)"/>'),
                            $closespan = $('<span class="te_ts_icon_close te_ts_wrap_scale50" title="' + resources.text.Close + '"/>'),
                            $popcontent = $('<div class="content"/>'),
                            $btnarea = $('<div class="te_ts_tx_c buttons"/>');
                        //有傳入預定寬度才重設寬度
                        if (this.option.width) {
                            $popbox.width(this.option.width);
                        }

                        if (this.option.close) {
                            $closehref.append($closespan);
                            $popbox.append($closehref);
                        }
                        $popbox.append($popcontent).append($btnarea);
                        popupwrapobj.appendChild($popwrap.append($popbox).get(0));
                        this.pop = popupwrapobj;
                    };
                    popup.prototype = {
                        Text: function (content) {
                            var $p = $('<p class="te_ts_wrap_inner"/>').text(content),
                                contentele = this.pop.ele.querySelector('.content');
                            contentele.innerHTML = '';
                            contentele.appendChild($p.get(0));
                            this.Open();
                            return this;
                        },
                        Html: function (content, open) {
                            var DIV = document.createElement('DIV'),
                                contentele = this.pop.ele.querySelector('.content');
                            contentele.innerHTML = content;
                            this.Open(open);
                            return this;
                        },
                        Open: function (open) {
                            open = open || true;
                            if (open) {
                                this.pop.show();
                                $('input, textarea', _mediator.data.dom_frame).blur();
                                this.SetButton();
                            }
                            return this;
                        },
                        SetButton: function () {
                            var _this = this,
                                buttons = _this.pop.ele.querySelector('.buttons'),
                                close = _this.pop.ele.querySelector('a.close');
                            buttons.innerHTML = '';
                            if (close) {
                                close.onclick = function (event) {
                                    _this.Close(_this.option.close ? _this.option.close.fn : null);
                                };
                            }

                            _this.option.button.forEach(function (value, index) {
                                var _btntemplate = document.createElement('INPUT');
                                _btntemplate.type = 'button';
                                _btntemplate.className = 'te_ts_btn_basic_sub';
                                _btntemplate.value = value.text;

                                buttons.appendChild(_btntemplate);
                                _btntemplate.onclick = function (event) {
                                    _this.Close(value.callback);
                                    Array.prototype.forEach.call(buttons.querySelectorAll('input[type="button"]'), function (value, index) {
                                        value.onclick = null;
                                    });
                                };
                            });
                        },
                        Close: function (_callback) {
                            //this.pop.hide();
                            //先做callback，怕callback會需要目前Popup內容的相關資訊，
                            //將remove移至callback執行完才執行，所以前面先把popup hide起來
                            if (typeof (_callback) !== 'undefined' && _callback !== null) {
                                //callback加入傳遞目前popup資訊回去
                                _callback(this.pop);
                            }
                            this.pop.remove();
                        },
                        Fail: function () {
                            this.Text(resources.text.SubmitFailed);
                            return this;
                        }
                    };
                    return new popup();
                }, //客戶端popup, 用法同PopUpTool.js中的popup
                loading: (function () {
                    var popupwrapobj = new _template.popupmask(),
                        $loader = $('<div class="te_loader04"/>');
                    popupwrapobj.appendChild($loader.get(0));

                    var loadqueue = new Array(),
                        index = 0,
                        loadqueuestate = {
                            start: 0, over: 1
                        },
                        loadqueuemanage = (function () {
                            var start = function (obj) {
                                if (loadqueue.indexOf(obj) === 0 && !obj.exec) {
                                    obj.target.show();
                                    obj.exec = true;
                                }
                            },
                                over = function (obj) {
                                    var _index = loadqueue.indexOf(obj);
                                    if (_index >= 0) {
                                        if (loadqueue.indexOf(obj) === 0) {
                                            obj.target.remove();
                                            obj.exec = false;
                                        }
                                        loadqueue.splice(_index, 1);
                                    }
                                },
                                manage = function (state, obj) {
                                    if (state === loadqueuestate.start) {
                                        loadqueue.push(obj);
                                        start(obj);
                                    } //add loading to queue and start
                                    else {
                                        over(obj);
                                        if (loadqueue.length) {
                                            start(loadqueue[0]);
                                        }
                                    } //remove loading from queue or from dom
                                };
                            return manage;
                        }());

                    var loading = function () {
                        this.target = popupwrapobj;
                        this.index = index++;
                        this.exec = false;
                    };
                    loading.prototype = {
                        start: function () {
                            loadqueuemanage(loadqueuestate.start, this);
                        },
                        over: function () {
                            loadqueuemanage(loadqueuestate.over, this);
                        }
                    };
                    return loading;
                }()), //loading
                customersendmessage: function (WEB_Message) {
                    var dfd = $.Deferred();
                    _mediator.ajax.uploadwebmessage(WEB_Message.Message).done(function (data) {
                        var MessageID = data.MessageID;
                        _mediator.sendmessage(MessageType.CustomerSendMessage, MessageID);
                        dfd.resolve();
                    }).fail(function (error) {
                        if (error.responseJSON) {
                            let message = UploadErrorMessage(error.responseJSON, resources);
                            if ((message || '') !== '') {
                                _mediator.public.popup().Text(message);
                            }

                            WEB_Message.Message['strMessage'] = '';
                        }

                        let _msgobj = ToChatMsgObject(WEB_Message, false, true);
                        _mediator.dom.chatmessagearea.newmessage(_msgobj);

                        dfd.resolve();
                    });
                    return dfd.promise();
                },
                ignoreOnBeforeUnload: (function () {
                    var obj = function () {
                        this._status = false;
                    };
                    obj.prototype.Ignore = function (returnInterval) {
                        var _this = this;
                        this._status = true;
                        if (returnInterval) {
                            setTimeout(function () { _this._status = false; }, returnInterval);
                        }
                    };
                    obj.prototype.Unignore = function () {
                        this._status = false;
                    };
                    obj.prototype.GetStatus = function () {
                        return this._status;
                    };

                    return new obj();
                }()),
                currentOpenPage: (function () {
                    var obj = function () {
                        this.currentObject = null;
                    };

                    obj.prototype.set = function (setCurrentObject) {
                        this.currentObject = setCurrentObject;
                    };

                    obj.prototype.close = function () {
                        if (this.currentObject && this.currentObject.close) {
                            this.currentObject.close();
                        }
                    };

                    obj.prototype.clear = function (setClearObject) {
                        if (this.currentObject === setClearObject) {
                            this.currentObject = null;
                        }
                    };

                    return new obj();
                }())
            }
        };

        /**
         * 需在document ready後執行
         */
        var retobj = new customerCommon();
        _mediator.sendmessage = function (type, obj) {
            if (retobj.mediator) {
                return retobj.mediator.methods.hub.sendMessage(type, obj);
            } else {
                console.log('mediator not implement yet');
            }
        };
        _mediator.sendmessageobj = function (WEB_Message) {
            if (retobj.mediator) {
                return retobj.mediator.methods.hub.sendMessageObj(WEB_Message);
            } else {
                console.log('mediator not implement yet');
            }
        };
        _mediator.reConnect = function (WEB_Message) {
            if (retobj.mediator) {
                return retobj.mediator.methods.hub.reConnect();
            } else {
                console.log('mediator not implement yet');
            }
        };
        _mediator.receivemessage = function (WEB_Message) {
            if (retobj.mediator) {
                return retobj.mediator.methods.processor.receiveMessage(WEB_Message);
            } else {
                console.log('mediator not implement yet');
            }
        };
        _mediator.ajax = retobj.ajax;
        _mediator.dom = retobj.dom;
        _mediator.data = retobj.data;
        _mediator.public = retobj.public;

        /* ========== 以下是頁面功能 ========== */
        $(window).resize(_handler.windowresize);
        window.addEventListener('message', _handler.postmessage, false);
        window.addEventListener('beforeunload', _handler.beforeunload);
        window.addEventListener('load', _handler.windowload);
        $(document).ready(function () {
            _handler.windowload();
        });
        if ($('.edit_model_list_bg_07')) {

            $(document).bindevent('click', '.edit_model_list_bg_07', function () {

                _mediator.ajax.logclickaction('richmenu', proid).done(function (data, status, response, header) {
                    if (!data.result) {
                        console.log('insertbannerlog Failed');
                    }
                });
            });
        }

        /* ========== 以上是頁面功能 ========== */
        _init.chatpage();
        retobj.chatdata.init();
        _mediator.dom.inputtoolbar.inputtoolbarinit(false);
        document.addEventListener('focusout', function (e) { _mediator.dom.adjustWindow(); });
        document.addEventListener('click', function (e) {
            _mediator.dom.uploadbox.tryclose(e);
        });

        return retobj;
    };
});
;
(function (factory) {
    if (typeof define === "function" && define.amd) {
        define(["jquery"], factory);
    } else if (typeof module !== "undefined" && module.exports) {
        module.exports = factory;
    } else {
        factory(jQuery, window, document);
    }
})(function ($, window, document) {
    var domhandler;
    customerProcessor = function () {
        var _this = this;
        _this.mediator = null;
    };

    //對外接口
    customerProcessor.prototype = {
        receiveMessage: function (WEB_Message) {
            var _this = this,
                _common = this.mediator.methods.common,
                _domhandler = _common.dom,
                _ajax = _common.ajax,
                _chatdata = _common.chatdata,
                _hub = this.mediator.methods.hub;
            var DataObj = WEB_Message.Message;
            if (WEB_Message.strMessageType) {
                WEB_Message.strMessageType = MessageType[WEB_Message.strMessageType] || parseInt(WEB_Message.strMessageType) || WEB_Message.strMessageType;
                switch (WEB_Message.strMessageType) {
                    case MessageType.SendChatMessage: //接收並處理文字訊息
                        var _msgobj = ToChatMsgObject(WEB_Message);
                        if (DataObj.History) {
                            _domhandler.chatmessagearea.newmessage(_msgobj, false, true);
                        } else {
                            _domhandler.chatmessagearea.newmessage(_msgobj);
                            if (!_chatdata.get().windowstatus && _msgobj.Character !== 'Customer') {
                                //未讀訊息
                                _common.parentpost('notread', true);
                            }
                        }
                        break;
                    case MessageType.BotMessage: //接收並處理機器人格式訊息
                        switch (DataObj.MessageObject.type) {
                            case BotSendType.text:
                                var _msgobjb = ToChatMsgObject(WEB_Message);
                                if (DataObj.History) {
                                    _domhandler.chatmessagearea.newmessage(_msgobjb, false, true);
                                } else {
                                    _domhandler.chatmessagearea.newmessage(_msgobjb);
                                }
                                if (_chatdata.get().chatid && !_chatdata.get().windowstatus && _msgobjb.Character !== 'Customer') {
                                    //未讀訊息
                                    _common.parentpost('notread', true);
                                }
                                break;
                            case BotSendType.option:
                                _domhandler.quickoption.stepoption(DataObj.MessageObject.content);
                                break;
                            case BotSendType.popwindow:
                                _domhandler.popwindow.pop(DataObj.MessageObject.content);
                                break;
                            default:
                                console.log('未處理BotMessage格式');
                                console.log(DataObj.MessageObject.type);
                                console.log(DataObj);
                                break;
                        }
                        break;
                    case MessageType.ReductionChat: //恢復對話內容
                        if (DataObj && DataObj.length) {
                            DataObj.forEach(function (value) {
                                //if (value.Message.ChatDetailID) {
                                //    value.Message.ChatDetailID = '';
                                //}
                                _this.receiveMessage(value);
                            });
                            _domhandler.chatmessagearea.scrollCtrl.To(_domhandler.chatmessagearea.scrollCtrl.data().height, 0);
                        }
                        break;
                    case MessageType.LoadHistoryMessage: //載入過去對話
                        if (_domhandler.chatmessagearea.loadhistory.setdata(DataObj)) {
                            //載入過去對話按鈕
                            _domhandler.chatmessagearea.systemmessage(CustomerResources.text.LoadMoreChat, 'button', false, true);
                        }
                        break;
                    case MessageType.AssignedSeats: //轉接人工客服成功
                        var message = CustomerResources.text.AdapterSuccess.Format(DateFormat(DataObj.time, 'HH:mm'));
                        _domhandler.chatmessagearea.systemmessage(message, 'text');
                        _domhandler.quickoption.hide();
                        break;
                    case MessageType.ShowIVR://接收IVR
                        _domhandler.IVR.close();
                        if (DataObj['list']) {
                            _domhandler.IVR.open(DataObj['list']);
                        } else {
                            _domhandler.quickoption.ivroption(DataObj['chattype'], DataObj['cnt']);
                        }
                        break;
                    case MessageType.CustomerChangeStatus://改變對話狀態
                        _chatdata.statuschange(DataObj);
                        break;
                    case MessageType.CustomerWindowStatus://改變對話視窗狀態記錄
                        _chatdata.windowstatuschange(DataObj);
                        break;
                    case MessageType.CustomerUserConnected://連接完成接收ChatData
                        _domhandler.chatmessagearea.loadhistory.init();
                        _domhandler.chatmessagearea.init();
                        _domhandler.inputtoolbar.inputtoolbarinit(true);
                        _chatdata.set(DataObj);
                        _this.mediator.methods.common.dom.chatmessagearea.newpromote(); //推播語
                        break;
                    case MessageType.ChatEnd://對話結束
                        if (_chatdata.get().chatid) {
                            _domhandler.IVR.close();
                            _domhandler.chatmessagearea.agenttyping.end();
                            _domhandler.chatmessagearea.systemmessage(CustomerResources.text.ChatEnd, 'text');
                            _chatdata.init();
                            _domhandler.inputtoolbar.inputtoolbarinit(false);
                            //清除未讀訊息
                            _common.parentpost('notread', false);
                            if (DataObj.SurveyObj) {
                                _common.parentpost('survey', DataObj.SurveyObj);
                            }
                        }
                        break;
                    case MessageType.AgentTyping://專員輸入中
                        switch (DataObj.strMessage) {
                            case 'focus':
                                if (_chatdata.get().chatid) {
                                    _domhandler.chatmessagearea.agenttyping.start();
                                }
                                break;
                            case 'blur':
                                _domhandler.chatmessagearea.agenttyping.end();
                                break;
                        }
                        break;
                    case MessageType.CustomerReconnectStatus: //取得重新連線狀態
                        if (DataObj === 'Unknown') {
                            _common.public.chatconnect.end();
                        }
                        break;
                    case MessageType.CloseCurrentOpenPage: //關閉現在開啟的視窗
                        if (_common.public.currentOpenPage) {
                            _common.public.currentOpenPage.close();
                        }
                        break;
                    default:
                        console.log('未處理格式');
                        console.log(WEB_Message.strMessageType);
                        console.log(DataObj);
                        break;
                }
            } //if
        }
    };
});;
