/***
客戶引用js, v1.1.4
***/
(function (factory) {
    factory(window, document, typeof (jQuery) === 'undefined' ? undefined : jQuery);
})(function (w, d, jquery) {
    if (jquery) {
        $ = jquery;
    }

    this.Temcs = function (options) {
        var defaults = {
            origin: '', //temcs origin
            domain: '', //temcs domain
            target: '', //iconarea
            type: 'iframe', //iframe or window
            channel: '', //渠道ID
            wtitle: '', //w模式視窗名稱
            wsize: 'width=400,height=600,resizable=no,left=100,top=100', //w模式視窗大小
            paramterTarget: null
        },
            option;
        var Temcs = function (options) {
            option = $.extend(true, {}, defaults, options);

            if (!option.channel || option.channel === '') {
                throw Error('Temcs: Channel ID can not be null.')
            } //channel參數為必須
            else {
                var origin = _tool.urlobj(option.domain).origin; //取得網域
                option.domain = option.domain ? option.domain.replace(new RegExp('\/$'), '') : origin; //調整網域參數
                postContent.init(origin); //初始化 post Message 工具
                paramters.url.init({ domain: option.domain, channel: option.channel }); //初始化網址參數
                paramters.system.init(option.channel); //初始化系統參數

                switch (option.type.toLowerCase()) {
                    case 'iframe':
                        components.iframe.init(); //初始化iframe
                        break;
                    case 'window':
                        components.window.init(option.wtitle, option.wsize); //初始化window
                        break;
                }

                if (option.paramterTarget) {
                    paramters.custom.init(d.querySelector(option.paramterTarget));
                } //初始化客製參數

                if (option.click) {
                    components.icon.init();
                    _init.self();
                } else {
                    var newtarget = function () {
                        var body = d.querySelector('body'),
                            _div = d.createElement('div');
                        _div.classList.add('temcs');
                        body.appendChild(_div);
                        return _div;
                    }

                    if (!option.target) {
                        var _temcs = d.querySelector('.temcs:not([data-temcs])');
                        if (_temcs && !_temcs.getAttribute('data-temcs')) {
                            option.target = _temcs;
                        } else {
                            option.target = newtarget();
                        }
                    } else {
                        if (option.target.getAttribute('data-temcs')) {
                            option.target = newtarget();
                        }
                    }
                    components.icon.init(option.target);
                    components.icon.hide();

                    template.icon(option.channel, paramters.custom.get('TEProd'))
                        .done(function (fragment) {
                            components.icon.setContent(fragment);
                            components.icon.show();
                            option.click = components.icon.chatbtn._ele;
                            _init.self();
                        })
                }
            }
        };

        (function () {
            this.is_window_open = function () {
                return components.window.isOpen();
            };
        }).call(Temcs.prototype);

        var _tool = {
            urlobj: function (urlstr) {
                var url = d.createElement('a');
                if (!urlstr) {
                    urlstr = d.location;
                }
                url.href = urlstr;
                if (!url.origin) {
                    url.origin = url.protocol + "//" + url.hostname + (url.port ? ':' + url.port : '');
                }
                return url;
            },
            originEqual: function (url1, url2) {
                var ele1 = d.createElement('a'),
                    ele2 = d.createElement('a');

                ele1.href = url1;
                ele2.href = url2;

                return (ele1.protocol === ele2.protocol) &&
                    (ele1.hostname === ele2.hostname) &&
                    (ele1.port === ele2.port);
            },
            checkmobile: (function () {
                return (navigator.userAgent.match(/Android/i) ||
                    navigator.userAgent.match(/iPad/i) ||
                    navigator.userAgent.match(/webOS/i) ||
                    navigator.userAgent.match(/iPhone/i) ||
                    navigator.userAgent.match(/BlackBerry/i) ||
                    navigator.userAgent.match(/Windows Phone/i));
            }()),
            bodyscrollCtrl: (function () {
                var bodyscrollCtrl = function () {
                    var _this = this;
                    this.resizeset = false;
                    this.scrollTop = 0;
                    this.scrollHeight = 0;
                    this.bodysetting = [
                        { key: 'webkitOverflowScrolling', value: 'touch', history: '' },
                        { key: 'overflow', value: 'hidden', history: '' },
                        { key: 'position', value: 'relative', history: '' },
                        { key: 'height', value: '100%', history: '' },
                        { key: 'margin', value: '0', history: '' },
                        { key: 'top', value: '0', history: '' },
                        { key: 'left', value: '0', history: '' },
                        { key: 'bottom', value: '0', history: '' },
                        { key: 'right', value: '0', history: '' }
                    ];
                    this.htmlsetting = [
                        { key: 'webkitOverflowScrolling', value: 'touch', history: '' },
                        { key: 'overflow', value: 'hidden', history: '' },
                        { key: 'position', value: 'relative', history: '' },
                        { key: 'height', value: null, history: '' },
                        { key: 'top', value: null, history: '' }
                    ];
                    resizelistener.push(function (innerHeight) {
                        _this.Resize(innerHeight);
                    });
                }

                bodyscrollCtrl.prototype = {
                    Fixed: function () {
                        if (_tool.checkmobile) {
                            this.resizeset = true;
                        
                            var _html = d.documentElement,
                                _body = d.body,
                                scrollTop = d.body.scrollTop || d.documentElement.scrollTop,
                                scrollHeight = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
                        
                            this.scrollTop = scrollTop;
                            this.scrollHeight = scrollHeight;
                        
                            this.htmlsetting.forEach(function (ele) {
                                ele.history = _html.style[ele.key];
                                if (ele.value !== null) {
                                    _html.style[ele.key] = ele.value;
                                } else {
                                    switch (ele.key) {
                                        case 'top':
                                            _html.style[ele.key] = '-' + (scrollHeight - _html.clientHeight) + 'px';
                                            break;
                                        case 'height':
                                            _html.style[ele.key] = scrollHeight + 'px';
                                            break;
                                    }
                                }
                            });
                            this.bodysetting.forEach(function (ele) {
                                ele.history = _body.style[ele.key];
                                if (ele.value !== null) {
                                    _body.style[ele.key] = ele.value;
                                }
                            });
                        
                            this.Resize(w.innerHeight);
                        }
                    },
                    Loose: function () {
                        if (_tool.checkmobile) {
                            this.resizeset = false;

                            var _html = d.documentElement,
                                _body = d.body;

                            this.htmlsetting.forEach(function (ele) {
                                _html.style[ele.key] = ele.history;
                                ele.history = '';
                            });
                            this.bodysetting.forEach(function (ele) {
                                _body.style[ele.key] = ele.history;
                                ele.history = '';
                            });
                            d.body.scrollTop = d.documentElement.scrollTop = this.scrollTop;
                            this.scrollTop = 0;
                            this.scrollHeight = 0;
                        }
                    },
                    Resize: function (innerHeight) {
                        if (this.resizeset) {
                            var _html = d.documentElement;
                            _html.style.height = this.scrollHeight + 'px';
                            _html.style.top = '-' + (this.scrollHeight - innerHeight) + 'px';
                            _html.style.position = 'absolute';
                            _html.style.width = '100%';
                            components.iframe._ele.style.height = innerHeight + 'px';
                            components.iframe._ele.style.position = 'absolute';
                            components.iframe._ele.style.top = -(parseInt(_html.style.top)) + 'px';
                        }
                    }
                }

                return new bodyscrollCtrl();
            }())
        },
            _ajax = {
                geticon: function (channel, teprod) {
                    return $.ajax({
                        url: paramters.url.data.icon,
                        type: 'POST',
                        data: { /*channel: channel, */teprod: teprod }
                    });
                },
                getparamters: function (channel) {
                    return $.ajax({
                        url: paramters.url.data.sysparamter,
                        type: 'POST',
                        data: { /*channelID: channel*/ }
                    });
                }
            },
            _init = {
                self: function () {
                    option.click.onclick = function (event) {
                        if (option.type === 'iframe') {
                            components.icon.openframe(components.icon.new_chat);
                        } else {
                            components.window.open();
                        }
                        components.icon.msg.info.hide();
                    };
                    components.icon.msg.promote.setPromote();
                }
            },
            template = {
                icon: function (channel, teprod) {
                    var dfd = $.Deferred(),
                        fragment = d.createDocumentFragment(),
                        _div = d.createElement('DIV');
                    _ajax.geticon(channel, teprod || '')
                        .done(function (html) {
                            _div.innerHTML = html;
                            Array.prototype.forEach.call(_div.childNodes, function (value) {
                                fragment.appendChild(value.cloneNode(true));
                            });
                            dfd.resolve(fragment);
                        })
                        .fail(function (err) {
                            dfd.reject(err);
                        });

                    return dfd.promise();
                },
                iframe: (function () {
                    var fragment = d.createDocumentFragment(),
                        _div = d.createElement('DIV');
                    _div.innerHTML = '<div class="te_ts_chatArea"><div class="te_ts_iframe"><iframe id="chat" frameborder="0" scrolling="no"></iframe></div></div>';

                    Array.prototype.forEach.call(_div.childNodes, function (value) {
                        fragment.appendChild(value);
                    });

                    return fragment;
                }())
            },
            paramters = {
                url: new function () {
                    this.data = {
                        chat: '{domain}/Customer/WebCustomer/Channel/{channel}/Chat',
                        loading: '{domain}/Customer/WebCustomer/Channel/{channel}/Loading',
                        sysparamter: '{domain}/Customer/WebCustomer/Channel/{channel}/GetSysParameters',
                        icon: '{domain}/Customer/WebCustomer/Channel/{channel}/Icon'
                    };
                    this.init = function (options) {
                        if (typeof (options) === 'object') {
                            for (var key in this.data) {
                                var _value = this.data[key];

                                //replace with object key
                                _replacetarget = options;
                                _regex = new RegExp('{(\\w+(;\\w+)*)}', 'g');
                                this.data[key] = _value.replace(_regex, function (match, p1) {
                                    if (_replacetarget[p1] != null) {
                                        return _replacetarget[p1];
                                    } else {
                                        return match;
                                    }
                                });
                            }
                        }
                    }
                },
                system: new function () {
                    this._data = new Object();
                    this._init = false;
                    this._requestlist = new Array();
                    this.request = function (callback) {
                        if (this._init) {
                            callback(this._data);
                        } else {
                            this._requestlist.push(callback);
                        }
                    };
                    this.init = function (channelid) {
                        var _this = this;
                        //撈系統參數
                        _ajax.getparamters(channelid)
                            .done(function (params) {
                                _this._data = params;
                            })
                            .fail(function (err) {
                            })
                            .then(function (data) {
                                _this._init = true;
                                if (_this._requestlist.length) {
                                    _this._requestlist.forEach(function (callback) {
                                        callback(_this.data);
                                    });
                                }
                            });
                    };
                },
                custom: new function () {
                    this._data = new Object();
                    this.get = function (key, defaultValue) {
                        if (key) {
                            return this._data[key] || (defaultValue === undefined ? '' : defaultValue);
                        } else {
                            return this._data;
                        }
                    };
                    this.init = function (target) {
                        var data = new Object();
                        if (target && target.childNodes.length) {
                            Array.prototype.forEach.call(target.childNodes, function (element, index, array) {
                                if (element.nodeType != 3 && element.attributes['name']) {
                                    var _name = element.attributes['name'].value;
                                    var _value = null;
                                    switch (element.tagName) {
                                        case 'INPUT':
                                            _value = element.value;
                                            break;
                                        default:
                                            _value = element.textContent;
                                            break;
                                    }
                                    _value = _value.trim();
                                    if (_value) {
                                        data[_name] = _value;
                                    }
                                }
                            });
                        }
                        this._data = data;
                    };
                }
            },
            components = {
                icon: new function () {
                    this.init = function (target) {
                        //initial
                        this.statustype = {
                            close: 0, mini: 1, open: 2
                        };
                        this.status = this.statustype.close;
                        this.new_chat = true;

                        //set
                        this._ele = target;
                        if (target) {
                            this._ele.setAttribute('data-temcs', true);
                        }
                    };
                    this.setContent = function (fragment) {
                        if (this._ele) {
                            this._ele.appendChild(fragment);
                            this.chatbtn.init(this);
                            this.unread.init(this);
                            this.msg.init(this);
                        }
                    };
                    this.show = function () {
                        if (this._ele) {
                            this._ele.style.display = '';
                        }
                    }; //顯示icon
                    this.hide = function () {
                        if (this._ele) {
                            this._ele.style.display = 'none';
                        }
                    }; //隱藏icon
                    this.openframe = function (newChat) {
                        if (this.status !== this.statustype.open) {
                            this.status = this.statustype.open;
                            this.hide();
                            this.chatbtn.setmini(false);

                            var openchatobj = {
                                newchat: newChat == null ? true : newChat,
                                customeParam: paramters.custom.get()
                            };

                            components.iframe.show();
                            postContent.sendmessage('framemodify');
                            postContent.sendmessage('openchat', openchatobj);
                            _tool.bodyscrollCtrl.Fixed();
                        }
                    }; //開啟iframe
                    this.closeframe = function (mini) {
                        if (this.status === this.statustype.open) {
                            this.new_chat = !mini;
                            this.status = mini ? this.statustype.mini : this.statustype.close;
                            switch (this.status) {
                                case this.statustype.mini:
                                    this.msg.hide();
                                    this.chatbtn.setmini(true);
                                    break;
                                case this.statustype.close:
                                    this.msg.show();
                                    break;
                            }

                            components.iframe.hide();
                            postContent.sendmessage('framemodify');
                            this.show();
                            _tool.bodyscrollCtrl.Loose();
                        }
                    }; //關閉iframe
                    this.chatbtn = new function () {
                        this.init = function (_icon) {
                            this.root = _icon;
                            if (this.root._ele) {
                                this._ele = this.root._ele.querySelector('.chatbtn');
                            }
                        };
                        this.spinnerAnime = function (move) {
                            if (this._ele) {
                                var _spinner = this._ele.querySelector('.spinner');
                                if (_spinner) {
                                    (move ? _spinner.classList.add : _spinner.classList.remove).call(_spinner.classList, 'ani_move');
                                }
                            }
                        }; //開啟spinner動畫
                        this.setmini = function (set) {
                            if (this._ele) {
                                if (set) {
                                    this._ele.classList.add('mini');
                                }
                                else {
                                    this._ele.classList.remove('mini');
                                }
                            }
                        };
                    };
                    this.unread = new function () {
                        this.init = function (_icon) {
                            this.root = _icon;
                            if (this.root._ele) {
                                this._ele = this.root._ele.querySelector('.unread');
                            }
                        };
                        this.value = function () {
                            return this._ele ? (parseInt(this._ele.innerText) || 0) : 0;
                        };
                        this.increase = function (_num) {
                            _num = _num || 1;
                            if (this._ele) {
                                this._ele.innerText = this.value() + _num;
                            }
                        };
                        this.makeZero = function () {
                            if (this._ele) {
                                this._ele.innerText = '';
                            }
                        };
                    }; //未讀element
                    this.msg = new function () {
                        var _elementmanager = function () {
                            this._ele = null;
                            this._show = false; //是否可顯示
                        }; //msg內元素管理
                        (function () {
                            this.init = function (ele, show, _msg) {
                                this._ele = ele;
                                this._show = show;
                                this.root = _msg;
                                if (!this._show) {
                                    this.hide();
                                }
                            };
                            this.show = function (force) {
                                if (this._ele && this._show) {
                                    if (this.root._eleArray && !force) {
                                        this.root._eleArray.forEach(function (value) {
                                            value.hide(true);
                                        });
                                    }
                                    this._ele.style.display = '';
                                    this.root.show();
                                }
                            };
                            this.hide = function (force) {
                                if (this._ele) {
                                    if (this.root._eleArray && !force) {
                                        var _showlist = this.root._eleArray.filter(function (value) {
                                            return value._show && !value.isShow();
                                        });
                                        if (_showlist.length) {
                                            _showlist[0].show(true);
                                        }
                                    }
                                    this._ele.style.display = 'none';
                                    this.root.hide(true);
                                }
                            };
                            this.isShow = function () {
                                return this._ele ? this._ele.style.display !== 'none' : false;
                            };
                        }).call(_elementmanager.prototype);

                        this.init = function (_icon) {
                            this.root = _icon;
                            if (this.root._ele) {
                                this._msg = this.root._ele.querySelector('.outermsg');
                                this._eleArray = new Array();
                                if (this._msg) {
                                    var promomsg = this._msg.querySelector('.promomsg'),
                                        infomsg = this._msg.querySelector('.infomsg');
                                    this.promote.init(promomsg, (JSON.parse(promomsg.getAttribute('data-show').toLowerCase()) || false), this);
                                    this.info.init(infomsg, false, this);
                                    //show的優先順序
                                    this._eleArray.push(this.promote);
                                    this._eleArray.push(this.info);

                                    this._eleArray[0].show();
                                }
                            }
                        };

                        this.promote = (function () {
                            var _msg = this;
                            var promote = function () {
                                _elementmanager.call(this);
                            };
                            promote.prototype = Object.create(_elementmanager.prototype);
                            (function () {
                                this.setPromote = function () {
                                    var _this = this,
                                        callback = (function (sysparameter) {
                                            var _time = parseFloat(sysparameter.PromoteEnableTime) || 0;
                                            setTimeout((function () {
                                                this._show = false;
                                                this.hide(true);
                                            }).bind(this), _time * 1000); //推播語
                                        }).bind(this);
                                    if (_this._ele) {
                                        var _promoteid = _this._ele.getAttribute('data-promoteid');
                                        if (_tool.checkmobile) {
                                            paramters.system.request(callback);
                                        }
                                        this.promoteid = _promoteid;
                                    }
                                };
                            }).call(promote.prototype);
                            promote.prototype.constructor = promote;
                            return new promote();
                        }).call(this);

                        this.info = (function () {
                            var _msg = this;
                            var info = function () {
                                _elementmanager.call(this);
                            };
                            info.prototype = Object.create(_elementmanager.prototype);
                            (function () {
                                this.setInfo = function (html) {
                                    var _this = this;
                                    if (this._ele) {
                                        this._ele.innerHTML = '<a href="javascript:void(0)"><span class="te_ts_icon_close"></span></a>';
                                        this._ele.querySelector('a').onclick = function (e) {
                                            e.preventDefault();
                                            _this.hide();
                                        };

                                        var SPAN = d.createElement('SPAN');
                                        SPAN.innerHTML = html;
                                        this._ele.appendChild(SPAN);

                                        Array.prototype.forEach.call(SPAN.querySelectorAll('a'), function (value) {
                                            var _reg = {
                                                jshref: new RegExp('^javascript:(.*)', 'g'),
                                                jsfn: new RegExp('^(.*?)\\((.*?)\\)', 'g')
                                            },
                                                _content = value.href, _dataobj = null;

                                            if (_reg.jshref.test(_content)) {
                                                _content = _content.replace(_reg.jshref, function (match, p1) {
                                                    return $.trim(p1);
                                                });
                                            } //clear 'javascript:'

                                            if (_reg.jsfn.test(_content)) {
                                                var _match = _content.match(/^(.*?)\((.*?)\)/),
                                                    _fn = _match[1],
                                                    _param = decodeURIComponent(_match[2]);
                                                switch (_fn) {
                                                    case 'window.open':
                                                        _dataobj = { type: 'url', content: _param };
                                                        break;
                                                    case 'Survey':
                                                        _dataobj = { type: 'survey', content: _param };
                                                        break;
                                                }
                                            } //javascript function
                                            else {
                                                _dataobj = { type: 'url', content: _content };
                                            } //hyperlink

                                            if (_dataobj) {
                                                var onclickFn = null;
                                                switch (_dataobj.type) {
                                                    case 'url':
                                                        var _url = _dataobj.content.replace(/'(.*?)'/, function (match, p1) { return p1; });
                                                        onclickFn = function () { w.open(_url, '_blank'); };
                                                        break;
                                                    case 'survey':
                                                        var _surveyid = _dataobj.content.replace(/'(.*?)'/, function (match, p1) { return p1; });
                                                        onclickFn = function () { postContent.sendmessage('opensurvey', _surveyid); };
                                                        break;
                                                }
                                                if (onclickFn) {
                                                    value.onclick = function (event) {
                                                        event.preventDefault();
                                                        onclickFn();
                                                        _this.hide();
                                                    };
                                                    value.href = 'javascript:void(0);';
                                                }
                                            } //final process
                                        });

                                        this._show = true;
                                        this.show();
                                    }
                                };
                            }).call(info.prototype);
                            info.prototype.constructor = info;
                            return new info();
                        }).call(this);

                        this.hide = function (selfcheck) {
                            if (this._msg) {
                                if (!selfcheck) {
                                    this._msg.style.display = 'none';
                                } else {
                                    var _canhide = (function () {
                                        if (this._eleArray && this._eleArray.length) {
                                            return this._eleArray.every(function (value) {
                                                return !value.isShow();
                                            }); //全部都不顯示
                                        } else {
                                            return true;
                                        }
                                    }).call(this);
                                    if (_canhide) {
                                        this._msg.style.display = 'none';
                                    }
                                }
                            }
                        };
                        this.show = function () {
                            var _canshow = (function () {
                                if (this._eleArray && this._eleArray.length) {
                                    return this._eleArray.some(function (value) {
                                        return value.isShow();
                                    }); //有任何一個顯示
                                } else {
                                    return false;
                                }
                            }).call(this);
                            if (this._msg && _canshow) {
                                this._msg.style.display = '';
                            }
                        };
                    }; //訊息element
                },
                iframe: new function () {
                    this._ele = null;
                    this._iframe = null;
                    this.init = function () {
                        var body = d.querySelector('body'),
                            ele = template.iframe.querySelector('div').cloneNode(true),
                            iframe = ele.querySelector('#chat');
                        ele.style.display = 'none';
                        body.appendChild(ele);

                        iframe.src = paramters.url.data.chat;
                        iframe.style.display = 'none';

                        var _loadingframe = document.createElement('IFRAME');
                        var _loadingpostcontent = (function (_loadingframe) {
                            return new function () {
                                this._target = null;
                                this.setTarget = function (targetWindow) {
                                    this._target = targetWindow;
                                };
                                this.equal = function (source) {
                                    return this._target === source;
                                };
                                this.event = function (e) {
                                    if (e.data.type === 'loadingframeclose') {
                                        components.icon.closeframe(false);
                                    }
                                };
                            };
                        }(_loadingframe));
                        _loadingframe.frameBorder = 0;
                        _loadingframe.scrolling = 'no';
                        _loadingframe.src = paramters.url.data.loading;
                        _loadingframe.onload = function (e) {
                            _loadingpostcontent.setTarget(this.contentWindow);
                            MessageReceiver.push(_loadingpostcontent);
                        };

                        iframe.parentNode.insertBefore(_loadingframe, iframe);
                        iframe.onload = function (_loadingframe, e) {
                            postContent.setTarget(this.contentWindow);

                            this.style.display = '';
                            if (_loadingframe.parentNode) {
                                _loadingframe.parentNode.removeChild(_loadingframe);
                            }
                            if (MessageReceiver.indexOf(_loadingpostcontent) > -1) {
                                MessageReceiver.splice(MessageReceiver.indexOf(_loadingpostcontent), 1);
                            } //移除Listener
                        }.bind(iframe, _loadingframe);

                        this._ele = ele;
                        this._iframe = iframe;
                    };
                    this.show = function () {
                        if (this._ele) {
                            this._ele.style.display = '';
                        }
                    };
                    this.hide = function () {
                        if (this._ele) {
                            this._ele.style.display = 'none';
                        }
                    };
                    this.isShow = function () {
                        return this._ele ? this._ele.style.display !== 'none' : false;
                    };
                },
                window: new function () {
                    this._data = null;
                    this._args = null;
                    this.init = function (title, size) {
                        if (_tool.checkmobile) {
                            this._args = [paramters.url.data.chat];
                        } else {
                            this._args = [paramters.url.data.chat, title, size];
                        }
                    };
                    this.open = function () {
                        if (this._args) {
                            if (!this._data || this._data.closed) {
                                this._data = w.open.apply(w, this._args);
                                postContent.setTarget(this._data);
                            }
                            else {
                                this._data.focus();
                            }
                            return this._data;
                        }
                        else {
                            throw new Error('window.open parameter not setting');
                        }
                    };
                    this.close = function () {
                        this._data = null;
                    };
                    this.isOpen = function () {
                        return !!(this._data);
                    };
                }
            },
            postContent = new function () {
                this._target = null;
                this._load = false;
                this._queue = new Array();
                this._origin = null;
                this._eventpool = {
                    windowload: function (data) {
                        this.onload();
                        this.sendmessage('opened', { promoteid: components.icon.msg.promote.promoteid, teprod: paramters.custom.get('TEProd') });
                        if (data !== 'iframe' || components.iframe.isShow()) {
                            this.sendmessage('openchat', { newchat: true });
                        }
                    },
                    minifyframe: function (data) {
                        components.icon.closeframe(true);
                    },
                    closeframe: function (data) {
                        components.icon.closeframe(false);
                    },
                    closewindow: function (data) {
                        components.window.close();
                    },
                    notread: function (data) {
                        (data ? components.icon.unread.increase : components.icon.unread.makeZero).call(components.icon.unread);
                        components.icon.chatbtn.spinnerAnime(data);
                    },
                    survey: function (data) {
                        if (data && components.icon.status === components.icon.statustype.close) {
                            components.icon.msg.info.setInfo(data);
                        }
                    },
                    openedsurvey: function (data) {
                        components.icon.openframe(false);
                        components.icon.msg.info.hide();
                    },
                    adjustwindow: function () {
                        window.scrollTo(0, 0);
                    }
                };
                this.init = function (origin) {
                    this._origin = origin;
                    MessageReceiver.push(this);
                };
                this.setTarget = function (targetWindow) {
                    this._target = targetWindow;
                };
                this.sendmessage = function (type, obj) {
                    var _postdata = { type: type, obj: obj };
                    if (this._load && this._origin) {
                        if (this._target) {
                            this._target.postMessage(_postdata, this._origin);
                        } else {
                            w.console.log('postMessage target is null');
                        }
                    } else {
                        this._queue.push(_postdata);
                    }
                };
                this.onload = function () {
                    this._load = true;
                    while (this._queue.length) {
                        var _postdata = this._queue.shift();
                        this.sendmessage(_postdata.type, _postdata.obj);
                    }
                };
                this.equal = function (source) {
                    return this._target === source;
                };
                this.event = function (e) {
                    var callback = this._eventpool[e.data.type];
                    if (_tool.originEqual(this._origin, e.origin)) {
                        callback.bind(this, e.data.obj)();
                    }
                };
            };

        var retobj = new Temcs(options);
        return retobj;
    };

    var MessageReceiver = new Array();
    w.addEventListener('message', function (e) {
        if (e.data && e.data.type) {
            MessageReceiver.forEach(function (value, index, array) {
                if (value.equal(e.source)) {
                    value.event(e);
                }
            });
        }
    }, false);

    var resizelistener = new Array();
    w.addEventListener("resize", function (e) {
        if (resizelistener.length) {
            resizelistener.forEach(function (value, index, array) {
                value(w.innerHeight);
            });
        }
    });
});